var commonUtil = require('../../../util/common.util.page');
var commonFunction = new commonUtil();
var faultSummary = require('../igf-logfault/fault.summary.page');
var mergeFault = require('../igf-logfault/merge.fault.page');

var PaymentRequirement = function (faultDetails) {
    
    /**
     * Locators for elements used in 'Validating Payment Requirement' functionality
     */ 
    
    this.datePicker = element(by.css("ion-picker"));
    this.paymentRequestPopupContent = element(by.xpath("//app-payment-request-modal/ion-content/p[2]"));
    this.paymentRequestPopupNote = element(by.xpath("//app-payment-request-modal/ion-content/small"));
   // this.paymentREquestPopupYesBtn = element()
     
    this.paymentMethodList = element(by.xpath("//ion-select[contains(@formcontrolname, 'paymentMethod')]"));
    this.paymentMethodError = element(by.xpath("//ion-select[contains(@formcontrolname, 'paymentMethod')]/../following-sibling::app-validation-message/div"));
    this.paymentMethod = element(by.xpath("//ion-label[contains(text(), '" + faultDetails.paymentMethod + "')]/following-sibling::ion-radio"));
    
    this.proceedWithoutPayPopupMsg = element(by.xpath("//app-without-prepayment-modal//form//ion-row/ion-col[1]"));
    this.proceedWithoutPayPopupReason = element(by.xpath("//ion-input[@formcontrolname = 'overrideReason']/input"));
    this.reasonError = element(by.xpath("//ion-input[@formcontrolname = 'overrideReason']/../following-sibling::app-validation-message/div"));
    this.proceedWithoutPayPopupCancelBtn = element(by.xpath("//app-without-prepayment-modal//ion-button[contains(text(), 'Cancel')]"));
    this.proceedWithoutPayPopupOKBtn = element(by.xpath("//app-without-prepayment-modal//ion-button[contains(text(), 'OK')]"));

    this.contractorInputCLI = element(by.xpath("//ion-input[@formcontrolname = 'contractor']/input"));
    this.requiredStartDateCLI = element(by.xpath("//ion-datetime[@formcontrolname = 'requiredStartDate']"));
    this.requiredCompletionDateCLI = element(by.xpath("//ion-datetime[@formcontrolname = 'requiredCompletionDate']"));
    this.notesCLI = element(by.xpath("//ion-textarea[@formcontrolname = 'estimationNotes']"));
   // this.contractorError = element(by.xpath("//ion-input[contains(@formcontrolname, 'contractor')]/../following-sibling::app-validation-message/div"));
  //  this.confirmedEstimateError = element(by.xpath("//input[@formcontrolname = 'confirmedEstimate']/../following-sibling::app-validation-message/div"));
  //  this.nominalCodeError = element(by.xpath("//ionic-selectable[contains(@formcontrolname, 'nominalCode')]/../following-sibling::app-validation-message/div"));
  //  this.requiredStartDateError = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'requiredStartDate')]/../following-sibling::app-validation-message/div"));
  //  this.requiredEndDateError = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'requiredCompletionDate')]/../following-sibling::app-validation-message/div"));
   
    this.invoiceAmount = element(by.xpath("//input[contains(@formcontrolname, 'invoiceAmount')]"));
    this.uploadInvoice = element(by.xpath("//input[@id='docFiles']"));
    this.proceedBtn = element(by.xpath("//ion-button[contains(text(),  'Proceed') and contains(@class, 'submit-button')]"));
    this.faultActionStatus = element(by.css("div.banner > h2.banner-heading")); 
    this.faultActionSelected = element(by.xpath("//h6[contains(text(), 'the action you chose')]/following-sibling::ion-button"));
    this.responseQuestion = element(by.css("div.question-answer > h6.ng-star-inserted"));
    this.dateTimeTypeList = element(by.xpath("//ion-select[contains(@formcontrolname, 'dateTimeType')]"));
    this.dateTimeType = element(by.xpath("//ion-label[contains(text(), '" + faultDetails.dateTimeType + "')]/following-sibling::ion-radio"));
    this.dateTimeBtn = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'dateTime')]"));
    this.dateTimeDoneBtn = element(by.xpath("//button[contains(text(), 'Done')]"));
    this.pastDateError = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'dateTime')]/../following-sibling::ion-text"));
    this.contractorSearchValue = element(by.xpath("//label[contains(text(), '" + faultDetails.contractorCLISearchResult + "')]/.."));
    this.dateTimeBtnJobComplete = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'jobCompletionAt')]"));
 //   this.nextStepTxt = element(by.xpath("//ion-text[contains(text(), 'Please note')]/.."));
    
    this.faultTitle = element(by.xpath("(//h2[contains(text(), '" + faultDetails.title + "')])[2]")); 
    this.ccCompnay = element(by.xpath("//ion-input[contains(@formcontrolname, 'company')]/input"));
    this.ccName = element(by.xpath("//ion-input[contains(@formcontrolname, 'name')]/input"));
    this.ccTelephone = element(by.xpath("//ion-input[contains(@formcontrolname, 'telephone')]/input"));
    this.ccEmail = element(by.xpath("//ion-input[contains(@formcontrolname, 'email')]/input"));
    this.dateTimeBtnLLContractor = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'estimatedVisitAt')]"));
    this.pastDateErrorLLContractor = element(by.xpath("//ion-label[contains(text(), 'Visit Date')]/../following-sibling::ion-text"));
    this.ccConsentCheckbox = element(by.xpath("//ion-checkbox[contains(@formcontrolname, 'hasContractorConsent')]"));
    this.markJobCompletePopupTitle = element(by.css("ion-title.title-default"));
    this.markJobCompletePopupTxt = element(by.css("app-job-completion-modal > ion-content > form > ion-grid > ion-row > ion-col > h6"));
    this.actionAfterLFTE = element(by.xpath("//app-close-fault//h3"));
    this.displayedReason = element(by.xpath("//app-close-fault//h5"));
    
    this.completeRepairAfterPayment = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.contractorInputCLI);
        this.contractorInputCLI.click();
        commonFunction.sendKeysInto(this.contractorInputCLI, faultReported.contractorCLI);
        commonFunction.waitForElementToBeVisible(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.clickOnElement(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.scrollToElement(merge.confirmedEstimateInput);
        commonFunction.sendKeysInto(merge.confirmedEstimateInput, faultReported.confirmedEstimate);
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.clickOnElement(this.requiredStartDateCLI, "Required Start Date");
        commonFunction.setDate(faultReported.dateCLI);
        commonFunction.clickOnElement(this.requiredCompletionDateCLI, "Required End Date");
        commonFunction.setDate(faultReported.dateCLI);
        commonFunction.waitForElementToBeInvisible(this.datePicker, "Required Completion Date picker");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.waitForElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Obtain LL Authorisation confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLARLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLARLE), faultReported.positiveResponseLARLE);
        let paymentRequestPopupMsg = commonFunction.updateVerificationObject(this.paymentRequestPopupContent, "Payment Required popup message"); 
        expect(paymentRequestPopupMsg).toContainData(faultReported.paymentPopupMsg); 
        commonFunction.checkVisibleData('li', faultReported.paymentPopupReason, true, "Payment Required popup reason");
        let paymentRequestPopupNote = commonFunction.updateVerificationObject(this.paymentRequestPopupNote, "Payment Required popup note"); 
        expect(paymentRequestPopupNote).toContainData(faultReported.paymentPopupNote); 
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'NO'), "Payment Required popup NO button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(this.responseQuestion);
        let larleFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "LARLE - Question shown after cancelling Payment Requirement popup"); 
        expect(larleFaultActionQuestion).toContainData(faultReported.faultActionLARLEQuestion);       
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLARLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLARLE), faultReported.positiveResponseLARLE);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Payment Required popup YES button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let paymentRequiredFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after Payment Requirement action is chosen"); 
        expect(paymentRequiredFaultStatus).toContainData(faultReported.faultStatusLNPLE); 
        commonFunction.scrollToElement(this.faultActionStatus);           
        let lnpleFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after payment request sent to Landlord"); 
        expect(lnpleFaultAction).toContainData(faultReported.faultActionLNPLE);
        commonFunction.scrollToElement(this.responseQuestion);
        let lnpleFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "LNPLE - Question which requires an action"); 
        expect(lnpleFaultActionQuestion).toContainData(faultReported.faultActionLNPLEQuestion);       
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLNPLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLNPLE), faultReported.positiveResponseLNPLE);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'OK'), "Payment Received popup OK button");
        let paymentMethodError = commonFunction.updateVerificationObject(this.paymentMethodError, "Payment Received popup payment method error"); 
        expect(paymentMethodError).toContainData(faultReported.paymentErrorMsg);      
        commonFunction.clickOnElement(this.paymentMethodList, "Payment Received popup payment method list");
        commonFunction.clickOnElement(this.paymentMethod, faultReported.paymentMethod);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'OK'), "Payment Received popup OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");        
        commonFunction.scrollToElement(fSummary.faultStatus);
        let woRaisedFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after Works Order raised"); 
        expect(woRaisedFaultStatus).toContainData(faultReported.faultStatusCWONACE); 
        commonFunction.scrollToElement(this.faultActionStatus);           
        let cwonaceFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after Works Order raised"); 
        expect(cwonaceFaultAction).toContainData(faultReported.faultActionCWONACE);
        commonFunction.scrollToElement(this.responseQuestion);
        let cwonaceFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "CWONACE - Question which requires an action"); 
        expect(cwonaceFaultActionQuestion).toContainData(faultReported.faultActionCWONACEQuestion);       
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE), faultReported.positiveResponseCWONACE);
        let woAcceptConfirmationMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Works Order Accept Confirmation Message"); 
        expect(woAcceptConfirmationMsg1).toContainData(faultReported.woAcceptConfirmMsg);        
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Accept Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let woAcceptedFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after Works Order accepted"); 
        expect(woAcceptedFaultStatus).toContainData(faultReported.faultStatusCDTCEWO); 
        commonFunction.scrollToElement(this.faultActionStatus);           
        let cdtcewoFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after Works Order accepted"); 
        expect(cdtcewoFaultAction).toContainData(faultReported.faultActionCDTCEWO);
        commonFunction.scrollToElement(this.responseQuestion);
        let cdtcewoFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "CDTCEWO - Question which requires an action"); 
        expect(cdtcewoFaultActionQuestion).toContainData(faultReported.faultActionCDTCEWOQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO), faultReported.positiveResponseCDTCEWO);
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(element(by.xpath("//app-appointment-modal//ion-datetime")), "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        let retroDateMsg = commonFunction.updateVerificationObject(this.pastDateError, "Retrospective date warning"); 
        expect(retroDateMsg).toContainData(faultReported.pastDateError);       
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor repair visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cwoceFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after scheduled visit time"); 
        expect(cwoceFaultStatus).toContainData(faultReported.faultStatusCWOCE); 
        commonFunction.scrollToElement(this.faultActionStatus);           
        let cwoceFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after scheduled visit time"); 
        expect(cwoceFaultAction).toContainData(faultReported.faultActionCWOCE);
        commonFunction.scrollToElement(this.responseQuestion);
        let cwoceFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "CWOCE - Question which requires an action"); 
        expect(cwoceFaultActionQuestion).toContainData(faultReported.faultActionCWOCEQuestion);       
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWOCE), faultReported.positiveResponseCWOCE);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWOCE), faultReported.positiveResponseCWOCE);
        commonFunction.clickOnElement(this.dateTimeBtnJobComplete, "Date time picker");
        commonFunction.setDate(faultReported.jobCompleteDateValue);
        commonFunction.sendKeysInto(this.invoiceAmount, faultReported.repairAmount);
        commonFunction.scrollToElement(this.uploadInvoice);
        commonFunction.uploadImage(this.uploadInvoice, faultReported.invoiceDoc, "Invoice document");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Submit'),"Invoice Upload Submit button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cfteFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after job is completed"); 
        expect(cfteFaultStatus).toContainData(faultReported.faultStatusCFTE);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCFTE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCFTE), faultReported.positiveResponseCFTE);
        let tenantSatisfyConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Tenant satisfied Confirmation Message"); 
        expect(tenantSatisfyConfirmationMsg).toContainData(faultReported.tenantSatisfyConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Tenant satisfied confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cfteResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after tenant is satisfied"); 
        expect(cfteResponseFaultStatus).toContainData(faultReported.faultStatusAfterCFTE);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button','Yes, Approve this Invoice'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','Yes, Approve this Invoice'),"Approve Invoice button");
        let approveInvoiceConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Approve Invoice Confirmation Message"); 
        expect(approveInvoiceConfirmationMsg).toContainData(faultReported.invoiceApproveConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Approve Invoice confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let approveResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after invoice is approved"); 
        expect(approveResponseFaultStatus).toContainData(faultReported.faultStatusAfterInvoiceApproval);        
    } 
   
    this.completeRepairWithoutPrePayment = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.contractorInputCLI);
        this.contractorInputCLI.click();
        commonFunction.sendKeysInto(this.contractorInputCLI, faultReported.contractorCLI);
        commonFunction.waitForElementToBeVisible(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.clickOnElement(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.scrollToElement(merge.confirmedEstimateInput);
        commonFunction.sendKeysInto(merge.confirmedEstimateInput, faultReported.confirmedEstimate);
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.clickOnElement(this.requiredStartDateCLI, "Required Start Date");
        commonFunction.setDate(faultReported.dateCLI);
        commonFunction.clickOnElement(this.requiredCompletionDateCLI, "Required End Date");
        commonFunction.setDate(faultReported.dateCLI);
        commonFunction.waitForElementToBeInvisible(this.datePicker, "Required Completion Date picker");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Obtain LL Authorisation confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLARLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLARLE), faultReported.positiveResponseLARLE);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Payment Required popup YES button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseLNPLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseLNPLE), faultReported.negativeResponseLNPLE);
        let proceedWithoutPaymentPopupMsg = commonFunction.updateVerificationObject(this.proceedWithoutPayPopupMsg, "Proceed without Pre-Payment popup message"); 
        expect(proceedWithoutPaymentPopupMsg).toContainData(faultReported.proceedWithoutPaymentPopupMsg); 
        commonFunction.checkVisibleData('li', faultReported.paymentPopupReason, true, "Proceed without Pre-Payment popup reason");
        commonFunction.clickOnElement(this.proceedWithoutPayPopupOKBtn, "Proceed without Pre-Payment popup OK button");
        commonFunction.scrollToElement(this.reasonError);
        let reasonErrorMsg = commonFunction.updateVerificationObject(this.reasonError, "Proceed without Pre-Payment popup reason error"); 
        expect(reasonErrorMsg).toContainData(faultReported.paymentErrorMsg); 
        commonFunction.sendKeysInto(this.proceedWithoutPayPopupReason, faultReported.skipReason);
        commonFunction.clickOnElement(this.proceedWithoutPayPopupOKBtn, "Proceed without Pre-Payment popup OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");        
        commonFunction.scrollToElement(fSummary.faultStatus);
        let woRaisedFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after Works Order raised"); 
        expect(woRaisedFaultStatus).toContainData(faultReported.faultStatusCWONACE); 
        commonFunction.scrollToElement(this.faultActionStatus);           
        let cwonaceFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after Works Order raised"); 
        expect(cwonaceFaultAction).toContainData(faultReported.faultActionCWONACE);
        commonFunction.scrollToElement(this.responseQuestion);
        let cwonaceFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "CWONACE - Question which requires an action"); 
        expect(cwonaceFaultActionQuestion).toContainData(faultReported.faultActionCWONACEQuestion);       
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE), faultReported.positiveResponseCWONACE);
        let woAcceptConfirmationMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Works Order Accept Confirmation Message"); 
        expect(woAcceptConfirmationMsg1).toContainData(faultReported.woAcceptConfirmMsg);        
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Accept Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let woAcceptedFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after Works Order accepted"); 
        expect(woAcceptedFaultStatus).toContainData(faultReported.faultStatusCDTCEWO); 
        commonFunction.scrollToElement(this.faultActionStatus);           
        let cdtcewoFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after Works Order accepted"); 
        expect(cdtcewoFaultAction).toContainData(faultReported.faultActionCDTCEWO);
        commonFunction.scrollToElement(this.responseQuestion);
        let cdtcewoFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "CDTCEWO - Question which requires an action"); 
        expect(cdtcewoFaultActionQuestion).toContainData(faultReported.faultActionCDTCEWOQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO), faultReported.positiveResponseCDTCEWO);
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(element(by.xpath("//app-appointment-modal//ion-datetime")), "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        let retroDateMsg = commonFunction.updateVerificationObject(this.pastDateError, "Retrospective date warning"); 
        expect(retroDateMsg).toContainData(faultReported.pastDateError);       
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor repair visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cwoceFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after scheduled visit time"); 
        expect(cwoceFaultStatus).toContainData(faultReported.faultStatusCWOCE); 
        commonFunction.scrollToElement(this.faultActionStatus);           
        let cwoceFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after scheduled visit time"); 
        expect(cwoceFaultAction).toContainData(faultReported.faultActionCWOCE);
        commonFunction.scrollToElement(this.responseQuestion);
        let cwoceFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "CWOCE - Question which requires an action"); 
        expect(cwoceFaultActionQuestion).toContainData(faultReported.faultActionCWOCEQuestion);       
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWOCE), faultReported.positiveResponseCWOCE);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWOCE), faultReported.positiveResponseCWOCE);
        commonFunction.clickOnElement(this.dateTimeBtnJobComplete, "Date time picker");
        commonFunction.setDate(faultReported.jobCompleteDateValue);
        commonFunction.sendKeysInto(this.invoiceAmount, faultReported.repairAmount);
        commonFunction.scrollToElement(this.uploadInvoice);
        commonFunction.uploadImage(this.uploadInvoice, faultReported.invoiceDoc, "Invoice document");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Submit'),"Invoice Upload Submit button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cfteFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after job is completed"); 
        expect(cfteFaultStatus).toContainData(faultReported.faultStatusCFTE);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCFTE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCFTE), faultReported.positiveResponseCFTE);
        let tenantSatisfyConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Tenant satisfied Confirmation Message"); 
        expect(tenantSatisfyConfirmationMsg).toContainData(faultReported.tenantSatisfyConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Tenant satisfied confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cfteResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after tenant is satisfied"); 
        expect(cfteResponseFaultStatus).toContainData(faultReported.faultStatusAfterCFTE);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button','Yes, Approve this Invoice'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','Yes, Approve this Invoice'),"Approve Invoice button");
        let approveInvoiceConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Approve Invoice Confirmation Message"); 
        expect(approveInvoiceConfirmationMsg).toContainData(faultReported.invoiceApproveConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Approve Invoice confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let approveResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after invoice is approved"); 
        expect(approveResponseFaultStatus).toContainData(faultReported.faultStatusAfterInvoiceApproval);        
    }    
     
    this.changeRepairToLLOwnRepair = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.contractorInputCLI);
        this.contractorInputCLI.click();
        commonFunction.sendKeysInto(this.contractorInputCLI, faultReported.contractorCLI);
        commonFunction.waitForElementToBeVisible(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.clickOnElement(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.scrollToElement(merge.confirmedEstimateInput);
        commonFunction.sendKeysInto(merge.confirmedEstimateInput, faultReported.confirmedEstimate);
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.clickOnElement(this.requiredStartDateCLI, "Required Start Date");
        commonFunction.setDate(faultReported.dateCLI);
        commonFunction.clickOnElement(this.requiredCompletionDateCLI, "Required End Date");
        commonFunction.setDate(faultReported.dateCLI);
        commonFunction.waitForElementToBeInvisible(this.datePicker, "Required Completion Date picker");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Obtain LL Authorisation confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLARLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLARLE), faultReported.positiveResponseLARLE);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Payment Required popup YES button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('h6','Want to proceed in a different way?'));
        commonFunction.checkVisibleData('ion-button', faultReported.differentWayOptions, true, "Different way repair option is");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button',faultReported.differentRepair));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',faultReported.differentRepair), faultReported.differentRepair);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        let diffRepairConfirmMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Different Repair Confirmation Message"); 
        expect(diffRepairConfirmMsg1).toContainData(faultReported.diffRepairConfirmationMsg1);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Different repair confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lrleFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after selecting CLI action LL Own Repair"); 
        expect(lrleFaultStatus).toContainData(faultReported.faultStatusLRLE);
        commonFunction.scrollToElement(this.faultActionStatus);
        let lrleFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after selecting CLI action LL Own Repair"); 
        expect(lrleFaultAction).toContainData(faultReported.faultActionLRLE);
        let lrleFaultActionSelected = commonFunction.updateVerificationObject(this.faultActionSelected, "Selected CLI Action"); 
        expect(lrleFaultActionSelected).toContainData(faultReported.cliActionSelected);
        commonFunction.scrollToElement(this.responseQuestion);
        let lrleFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "Question which requires an action"); 
        expect(lrleFaultActionQuestion).toContainData(faultReported.faultActionLRLEQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE), faultReported.positiveResponseLRLE);
        let repairConfirmationMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Repair Confirmation Message1"); 
        expect(repairConfirmationMsg1).toContainData(faultReported.llOwnRepairConfirmMsg1);
        let repairConfirmationMsg2 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Repair Confirmation Message2"); 
        expect(repairConfirmationMsg2).toContainData(faultReported.llOwnRepairConfirmMsg2);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Work In Progress confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lrleResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after landlord response to LRLE"); 
        expect(lrleResponseFaultStatus).toContainData(faultReported.faultStatusAfterLRLE);
        commonFunction.scrollToElement(this.faultActionStatus);
        let lrleResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after landlord response to LRLE"); 
        expect(lrleResponseFaultAction).toContainData(faultReported.faultActionLRLEResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE));
        let responseSelectedLRLE = commonFunction.updateVerificationObjectByAttrib(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE), "Submitted Response LRLE", "color");
        expect(responseSelectedLRLE).toContainData(faultReported.lrleSubmittedResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', "Add Contractor Details"));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "Add Contractor Details"),  "Add Contractor Details button");
        commonFunction.waitForElementToBeVisible(this.ccCompnay, "Add Contractor Details popup");
        commonFunction.sendKeysInto(this.ccCompnay, faultReported.ccCompany);
        commonFunction.sendKeysInto(this.ccName, faultReported.ccName);
        let rNo1 = Math.floor((Math.random() * 100000) + 1);
        let rNo2 = Math.floor((Math.random() * 10000) + 1);
        let telephone = parseInt(faultReported.ccTelephone, 10);
        commonFunction.sendKeysInto(this.ccTelephone, (telephone + rNo1 + rNo2).toString());
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(this.dateTimeBtnLLContractor, "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        let retroDateMsg = commonFunction.updateVerificationObject(this.pastDateErrorLLContractor, "Retrospective date warning"); 
        expect(retroDateMsg).toContainData(faultReported.pastDateErrorLLContractor);
        commonFunction.scrollToElement(this.ccConsentCheckbox);
        commonFunction.clickOnElement(this.ccConsentCheckbox, "Contractor consent checkbox");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "SAVE"),  "SAVE button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lcleFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after visit time scheduled"); 
        expect(lcleFaultStatus).toContainData(faultReported.faultStatusLCLE);
        commonFunction.scrollToElement(this.faultActionStatus);
        let lcleFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after visit time scheduled LCLE"); 
        expect(lcleFaultAction).toContainData(faultReported.faultActionLCLE);
        commonFunction.scrollToElement(this.responseQuestion);
        let lcleFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "Question which requires an action LCLE"); 
        expect(lcleFaultActionQuestion).toContainData(faultReported.faultActionLCLEQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLCLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLCLE), faultReported.positiveResponseLCLE);
        commonFunction.waitForElementToBeVisible(this.markJobCompletePopupTxt, "Mark Job Complete popup");
        let jobCompletePopupTitle = commonFunction.updateVerificationObject(this.markJobCompletePopupTitle, "Mark Job Complete popup title"); 
        expect(jobCompletePopupTitle).toContainData(faultReported.markJobCompleteTitle);
        let jobCompletePopupText = commonFunction.updateVerificationObject(this.markJobCompletePopupTxt, "Mark Job Complete popup text"); 
        expect(jobCompletePopupText).toContainData(faultReported.markJobCompleteTxt);
        commonFunction.clickOnElement(this.dateTimeBtn, "Date time picker");
        commonFunction.setDate(faultReported.jobCompleteDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','YES'), "Mark Job Complete popup Yes button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lfteFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after job is completed"); 
        expect(lfteFaultStatus).toContainData(faultReported.faultStatusLFTE);
        commonFunction.scrollToElement(this.faultActionStatus);
        let lfteFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after job is completed LFTE"); 
        expect(lfteFaultAction).toContainData(faultReported.faultActionLFTE);
        commonFunction.scrollToElement(this.responseQuestion);
        let lfteFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "Question which requires an action LFTE"); 
        expect(lfteFaultActionQuestion).toContainData(faultReported.faultActionLFTEQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLFTE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLFTE), faultReported.positiveResponseLFTE);
        let tenantSatisfyConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Tenant satisfied and fault closure Confirmation Message"); 
        expect(tenantSatisfyConfirmationMsg).toContainData(faultReported.tenantSatisfyConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Tenant satisfied and fault closure confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(this.faultActionStatus);
        let lfteResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after tenant is satisfied"); 
        expect(lfteResponseFaultAction).toContainData(faultReported.faultActionAfterLFTE);
        let lfteResponseNextAction = commonFunction.updateVerificationObject(this.actionAfterLFTE, "Next Action after tenant is satisfied"); 
        expect(lfteResponseNextAction).toContainData(faultReported.faultNextActionAfterLFTE);
        commonFunction.scrollToElement(this.displayedReason);
        let closeReasonDisplayed = commonFunction.updateVerificationObject(this.displayedReason, "Fault closure reason"); 
        expect(closeReasonDisplayed).toContainData(faultReported.faultCloseReason);  
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lfteResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after tenant is satisfied"); 
        expect(lfteResponseFaultStatus).toContainData(faultReported.faultStatusAfterLFTE);
    }
}
module.exports = PaymentRequirement;
