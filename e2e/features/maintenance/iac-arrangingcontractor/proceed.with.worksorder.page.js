var commonUtil = require('../../../util/common.util.page');
var commonFunction = new commonUtil();
var fault = require('../igf-logfault/add.fault.page');
var faultSummary = require('../igf-logfault/fault.summary.page');
var mergeFault = require('../igf-logfault/merge.fault.page');

var WorksOrder = function (faultDetails) {
    
    /**
     * Locators for elements used in 'Proceed with Works Order' functionality
     */ 
    
    this.contractorError = element(by.xpath("//ion-input[contains(@formcontrolname, 'contractorName')]/../following-sibling::app-validation-message/div"));
    this.repairCostError = element(by.xpath("//input[@formcontrolname = 'repairCost']/../following-sibling::app-validation-message/div"));
    this.nominalCodeError = element(by.xpath("//ionic-selectable[contains(@formcontrolname, 'nominalCode')]/../following-sibling::app-validation-message/div"));
    this.jobCompleteDateError = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'jobCompletionAt')]/../following-sibling::app-validation-message/div"));
    this.additionalEstimateError = element(by.xpath("//input[contains(@formcontrolname, 'additionalEstimate')]/../following-sibling::app-validation-message/div"));
    this.additionalDetailsError = element(by.xpath("//ion-textarea[contains(@formcontrolname, 'additionalWorkDetails')]/../following-sibling::app-validation-message/div"));
  
    this.invoiceAmount = element(by.xpath("//input[contains(@formcontrolname, 'invoiceAmount')]"));
    this.uploadInvoice = element(by.xpath("//input[@id='docFiles']"));
    this.furtherWorkBtn = element(by.xpath("//ion-toggle[contains(@formcontrolname, 'isAnyFurtherWork')]"));
    this.additionalEstimate = element(by.xpath("//input[contains(@formcontrolname, 'additionalEstimate')]"));
    this.additionalDetails = element(by.xpath("//ion-textarea[contains(@formcontrolname, 'additionalWorkDetails')]/div/textarea"));
    this.invoicePhotoTab = element(by.xpath("//ion-segment-button[contains(@value, 'photo')]"));
    this.uploadInvoicePhoto = element(by.xpath("//input[@id='photoFiles']"));
    this.proceedBtn = element(by.xpath("//ion-button[contains(text(),  'Proceed') and contains(@class, 'submit-button')]"));
    this.faultActionStatus = element(by.css("div.banner > h2.banner-heading")); 
    this.faultActionSelected = element(by.xpath("//h6[contains(text(), 'the action you chose')]/following-sibling::ion-button"));
    this.responseQuestion = element(by.css("div.question-answer > h6.ng-star-inserted"));
    this.dateTimeTypeList = element(by.xpath("//ion-select[contains(@formcontrolname, 'dateTimeType')]"));
    this.dateTimeType = element(by.xpath("//ion-label[contains(text(), '" + faultDetails.dateTimeType + "')]/following-sibling::ion-radio"));
    this.dateTimeBtn = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'dateTime')]"));
    this.dateTimeDoneBtn = element(by.xpath("//button[contains(text(), 'Done')]"));
    this.dateSessionBtn = element(by.xpath("//ion-label[contains(text(), '" + faultDetails.dateSession + "')]/following-sibling::ion-radio"));
    this.dateEditSessionBtn = element(by.xpath("//ion-label[contains(text(), '" + faultDetails.editDateSession + "')]/following-sibling::ion-radio"));
    this.pastDateError = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'dateTime')]/../following-sibling::ion-text"));
    this.contractorInputWO = element(by.xpath("//ion-input[@formcontrolname = 'contractorName']/input"));
    this.contractorSearchValue = element(by.xpath("//label[contains(text(), '" + faultDetails.contractorWOSearchResult + "')]/.."));
    this.repairCost = element(by.xpath("//input[@formcontrolname = 'repairCost']"));
    this.dateTimeBtnJobComplete = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'jobCompletionAt')]"));
    this.nextStepTxt = element(by.xpath("//ion-text[contains(text(), 'Please note')]/.."));
    this.noteTxt1 = element(by.xpath("//ion-text[contains(text(), 'Note')]/following-sibling::span[1]"));
    this.noteTxt2 = element(by.xpath("//ion-text[contains(text(), 'Note')]/following-sibling::span[2]"));
    this.furtherJobInfo1 = element(by.xpath("//h2[contains(text(), 'Further Job')]/following-sibling::div[2]"));
    this.furtherJobInfo2 = element(by.xpath("//h2[contains(text(), 'Further Job')]/following-sibling::div[3]"));
    this.furtherJobInfo3 = element(by.xpath("//h2[contains(text(), 'Further Job')]/following-sibling::div[4]"));
     
    this.faultTitle = element(by.xpath("(//h2[contains(text(), '" + faultDetails.title + "')])[2]")); 
    this.ccCompnay = element(by.xpath("//ion-input[contains(@formcontrolname, 'company')]/input"));
    this.ccName = element(by.xpath("//ion-input[contains(@formcontrolname, 'name')]/input"));
    this.ccTelephone = element(by.xpath("//ion-input[contains(@formcontrolname, 'telephone')]/input"));
    this.ccEmail = element(by.xpath("//ion-input[contains(@formcontrolname, 'email')]/input"));
    this.dateTimeBtnLLContractor = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'estimatedVisitAt')]"));
    this.pastDateErrorLLContractor = element(by.xpath("//ion-label[contains(text(), 'Visit Date')]/../following-sibling::ion-text"));
    this.ccConsentCheckbox = element(by.xpath("//ion-checkbox[contains(@formcontrolname, 'hasContractorConsent')]"));
    this.markJobCompletePopupTitle = element(by.css("ion-title.title-default"));
    this.markJobCompletePopupTxt = element(by.css("app-job-completion-modal > ion-content > form > ion-grid > ion-row > ion-col > h6"));
    this.actionAfterLFTE = element(by.xpath("//app-close-fault//h3"));
    this.displayedReason = element(by.xpath("//app-close-fault//h5"));
    
    this.completeWorksorder = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cliFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after reaching to CLI stage"); 
        expect(cliFaultStatus).toContainData(faultReported.cliUpdatedStatus); 
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(merge.confirmedEstimateInput);
        commonFunction.sendKeysInto(merge.confirmedEstimateInput, faultDetails.confirmedEstimate);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        let woConfirmationMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Proceed with Works Order Confirmation Message1"); 
        expect(woConfirmationMsg1).toContainData(faultReported.cliStageSelectionConfirmMsg1);
        let woConfirmationMsg2 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Proceed with Works Order Confirmation Message2"); 
        expect(woConfirmationMsg2).toContainData(faultReported.cliStageSelectionConfirmMsg2);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed with Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(this.contractorInputWO);
        this.contractorInputWO.click();
        commonFunction.sendKeysInto(this.contractorInputWO, faultReported.contractorWO);
        commonFunction.waitForElementToBeVisible(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.clickOnElement(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SKIP PAYMENT'), "SKIP PAYMENT button");
        commonFunction.sendKeysInto(merge.skipReason, faultReported.skipReason); 
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SUBMIT'), "Skip Payment Reason submit button");                
        browser.sleep(2000);        
        let toastMsg = commonFunction.updateVerificationObject(browser.driver.findElement(by.css("div.toast-message")), "Quote request sent message"); 
        expect(toastMsg).toContainData(faultReported.woRequestSentMsg);       
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");        
        commonFunction.scrollToElement(fSummary.faultStatus);
        let woRaisedFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after Works Order raised"); 
        expect(woRaisedFaultStatus).toContainData(faultReported.faultStatusCWONACE); 
        commonFunction.scrollToElement(this.faultActionStatus);           
        let cwonaceFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after Works Order raised"); 
        expect(cwonaceFaultAction).toContainData(faultReported.faultActionCWONACE);
        commonFunction.scrollToElement(this.responseQuestion);
        let cwonaceFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "CWONACE - Question which requires an action"); 
        expect(cwonaceFaultActionQuestion).toContainData(faultReported.faultActionCWONACEQuestion);       
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE), faultReported.positiveResponseCWONACE);
        let woAcceptConfirmationMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Works Order Accept Confirmation Message"); 
        expect(woAcceptConfirmationMsg1).toContainData(faultReported.woAcceptConfirmMsg);        
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Accept Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let woAcceptedFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after Works Order accepted"); 
        expect(woAcceptedFaultStatus).toContainData(faultReported.faultStatusCDTCEWO); 
        commonFunction.scrollToElement(this.faultActionStatus);           
        let cdtcewoFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after Works Order accepted"); 
        expect(cdtcewoFaultAction).toContainData(faultReported.faultActionCDTCEWO);
        commonFunction.scrollToElement(this.responseQuestion);
        let cdtcewoFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "CDTCEWO - Question which requires an action"); 
        expect(cdtcewoFaultActionQuestion).toContainData(faultReported.faultActionCDTCEWOQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO), faultReported.positiveResponseCDTCEWO);
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(element(by.xpath("//app-appointment-modal//ion-datetime")), "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        let retroDateMsg = commonFunction.updateVerificationObject(this.pastDateError, "Retrospective date warning"); 
        expect(retroDateMsg).toContainData(faultReported.pastDateError);       
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor repair visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cwoceFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after scheduled visit time"); 
        expect(cwoceFaultStatus).toContainData(faultReported.faultStatusCWOCE); 
        commonFunction.scrollToElement(this.faultActionStatus);           
        let cwoceFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after scheduled visit time"); 
        expect(cwoceFaultAction).toContainData(faultReported.faultActionCWOCE);
        commonFunction.scrollToElement(this.responseQuestion);
        let cwoceFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "CWOCE - Question which requires an action"); 
        expect(cwoceFaultActionQuestion).toContainData(faultReported.faultActionCWOCEQuestion);       
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWOCE), faultReported.positiveResponseCWOCE);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWOCE), faultReported.positiveResponseCWOCE);
        commonFunction.clickOnElement(this.dateTimeBtnJobComplete, "Date time picker");
        commonFunction.setDate(faultReported.jobCompleteDateValue);
        commonFunction.sendKeysInto(this.invoiceAmount, faultReported.repairAmount);
        commonFunction.scrollToElement(this.uploadInvoice);
        commonFunction.uploadImage(this.uploadInvoice, faultReported.invoiceDoc, "Invoice document");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Submit'),"Invoice Upload Submit button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cfteFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after job is completed"); 
        expect(cfteFaultStatus).toContainData(faultReported.faultStatusCFTE);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCFTE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCFTE), faultReported.positiveResponseCFTE);
        let tenantSatisfyConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Tenant satisfied Confirmation Message"); 
        expect(tenantSatisfyConfirmationMsg).toContainData(faultReported.tenantSatisfyConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Tenant satisfied confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cfteResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after tenant is satisfied"); 
        expect(cfteResponseFaultStatus).toContainData(faultReported.faultStatusAfterCFTE);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button','Yes, Approve this Invoice'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','Yes, Approve this Invoice'),"Approve Invoice button");
        let approveInvoiceConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Approve Invoice Confirmation Message"); 
        expect(approveInvoiceConfirmationMsg).toContainData(faultReported.invoiceApproveConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Approve Invoice confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let approveResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after invoice is approved"); 
        expect(approveResponseFaultStatus).toContainData(faultReported.faultStatusAfterInvoiceApproval);        
    }
 
    this.checkWorksOrderDetails = function(faultReported){
        let addFault = new fault(faultReported);
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(merge.confirmedEstimateInput);
        commonFunction.sendKeysInto(merge.confirmedEstimateInput, faultDetails.confirmedEstimate);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed with Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        let contractorMissingMsg = commonFunction.updateVerificationObject(addFault.toastMessage, "Contractor missing message"); 
        expect(contractorMissingMsg).toContainData(faultReported.missingContractorError); 
        commonFunction.scrollToElement(this.contractorInputWO);
        this.contractorInputWO.click();
        this.repairCost.click();
        let contractorErrorMsg = commonFunction.updateVerificationObject(this.contractorError, "Contractor error message"); 
        expect(contractorErrorMsg).toContainData(faultReported.woFormErrorMsg); 
        this.contractorInputWO.click();
        commonFunction.sendKeysInto(this.contractorInputWO, faultReported.contractorWO);
        commonFunction.waitForElementToBeVisible(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.clickOnElement(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.scrollToElement(merge.nominalCodeList);
        let nominalCodeErrorMsg = commonFunction.updateVerificationObject(this.nominalCodeError, "Nominal Code error message"); 
        expect(nominalCodeErrorMsg).toContainData(faultReported.woFormErrorMsg); 
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(this.repairCost);
        commonFunction.sendKeysInto(this.repairCost, protractor.Key.BACK_SPACE);
        let repairCostErrorMsg = commonFunction.updateVerificationObject(this.repairCostError, "Repair Cost error message"); 
        expect(repairCostErrorMsg).toContainData(faultReported.woFormErrorMsg); 
        commonFunction.sendKeysInto(this.repairCost, faultDetails.confirmedEstimate); 
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SKIP PAYMENT'), "SKIP PAYMENT button");
        commonFunction.sendKeysInto(merge.skipReason, faultReported.skipReason); 
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SUBMIT'), "Skip Payment Reason submit button");                
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE), faultReported.positiveResponseCWONACE);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Accept Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO), faultReported.positiveResponseCDTCEWO);
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(element(by.xpath("//app-appointment-modal//ion-datetime")), "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor repair visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.markJobComplete));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.markJobComplete), faultReported.markJobComplete);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Submit'),"Invoice Upload Submit button");
        browser.sleep(2000);
        let missingDataMsg = commonFunction.updateVerificationObject(addFault.toastMessage, "Missing invoice data message"); 
        expect(missingDataMsg).toContainData(faultReported.invoiceDataMissingMsg); 
        let jobDateErrorMsg = commonFunction.updateVerificationObject(this.jobCompleteDateError, "Job completion date error message"); 
        expect(jobDateErrorMsg).toContainData(faultReported.woFormErrorMsg); 
        commonFunction.clickOnElement(this.dateTimeBtnJobComplete, "Date time picker");
        commonFunction.setDate(faultReported.jobCompleteDateValue);
        commonFunction.scrollToElement(this.uploadInvoice);
        commonFunction.uploadImage(this.uploadInvoice, faultReported.invoiceDoc, "Invoice document");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Submit'),"Invoice Upload Submit button");
        browser.sleep(2000);
        let missingInvoiceAmountMsg = commonFunction.updateVerificationObject(addFault.toastMessage, "Missing invoice amount message"); 
        expect(missingInvoiceAmountMsg).toContainData(faultReported.invoiceAmountMissingMsg); 
        commonFunction.scrollToElement(this.invoiceAmount);
        commonFunction.sendKeysInto(this.invoiceAmount, faultReported.repairAmount);
        commonFunction.clickOnElement(this.furtherWorkBtn, "Further Work button");
        let additionalEstimateMsg = commonFunction.updateVerificationObject(this.additionalEstimateError, "Additional estimate error message"); 
        expect(additionalEstimateMsg).toContainData(faultReported.woFormErrorMsg); 
        let additionalDetailsMsg = commonFunction.updateVerificationObject(this.additionalDetailsError, "Additional details error message"); 
        expect(additionalDetailsMsg).toContainData(faultReported.woFormErrorMsg); 
        commonFunction.sendKeysInto(this.additionalEstimate, faultReported.additionalEstimate);  
        commonFunction.sendKeysInto(this.additionalDetails, faultReported.additionalDetails);  
        commonFunction.clickOnElement(this.invoicePhotoTab, "Invoice Photo tab"); 
        commonFunction.uploadImage(this.uploadInvoicePhoto, faultReported.invoicePhoto, "Invoice photo");   
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Submit'),"Invoice Upload Submit button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(this.noteTxt1);
        let note1 = commonFunction.updateVerificationObject(this.noteTxt1, "Text to be noted"); 
        expect(note1).toContainData(faultReported.note1); 
        let note2 = commonFunction.updateVerificationObject(this.noteTxt2, "Additional Text to be noted"); 
        expect(note2).toContainData(faultReported.note2); 
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', 'Back'));
        let additionalJobInfo1 = commonFunction.updateVerificationObject(this.furtherJobInfo1, "Is there any further work to quote for?"); 
        expect(additionalJobInfo1).toContainData(faultReported.furtherJobInfo1); 
        let additionalJobInfo2 = commonFunction.updateVerificationObject(this.furtherJobInfo2, "Estimate"); 
        expect(additionalJobInfo2).toContainData(faultReported.furtherJobInfo2); 
        let additionalJobInfo3 = commonFunction.updateVerificationObject(this.furtherJobInfo3, "Additional Details"); 
        expect(additionalJobInfo3).toContainData(faultReported.furtherJobInfo3);        
    }

    this.rejectWorksOrderRequest = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(merge.confirmedEstimateInput);
        commonFunction.sendKeysInto(merge.confirmedEstimateInput, faultDetails.confirmedEstimate);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed with Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(this.contractorInputWO);
        this.contractorInputWO.click();
        commonFunction.sendKeysInto(this.contractorInputWO, faultReported.contractorWO);
        commonFunction.waitForElementToBeVisible(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.clickOnElement(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SKIP PAYMENT'), "SKIP PAYMENT button");
        commonFunction.sendKeysInto(merge.skipReason, faultReported.skipReason); 
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SUBMIT'), "Skip Payment Reason submit button");                
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCWONACE), faultReported.negativeResponseCWONACE);
        let rejectionConfirmMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Reject Works Order confirmation message"); 
        expect(rejectionConfirmMsg).toContainData(faultReported.woRejectionConfirmMsg); 
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Reject Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let faultStatusAfterRejection = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after quote request rejected by contractor"); 
        expect(faultStatusAfterRejection).toContainData(faultReported.faultStatusAfterContractorRejection); 
        commonFunction.scrollToElement(this.faultActionStatus);
        let cwonaceResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after contractor response to CWONACE"); 
        expect(cwonaceResponseFaultAction).toContainData(faultReported.faultActionCWONACEResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCWONACE));
        let responseSelectedCWONACE = commonFunction.updateVerificationObjectByAttrib(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCWONACE), "Submitted Response CWONACE", "color");
        expect(responseSelectedCWONACE).toContainData(faultReported.cwonaceSubmittedResponse);
        commonFunction.scrollToElement(this.nextStepTxt);
        let nextStepText = commonFunction.updateVerificationObject(this.nextStepTxt, "Next Step after contractor response to CWONACE"); 
        expect(nextStepText).toContainData(faultReported.nextStepCWONACEResponse);                      
    }

    this.couldNotCompleteJob = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(merge.confirmedEstimateInput);
        commonFunction.sendKeysInto(merge.confirmedEstimateInput, faultDetails.confirmedEstimate);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed with Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(this.contractorInputWO);
        this.contractorInputWO.click();
        commonFunction.sendKeysInto(this.contractorInputWO, faultReported.contractorWO);
        commonFunction.waitForElementToBeVisible(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.clickOnElement(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SKIP PAYMENT'), "SKIP PAYMENT button");
        commonFunction.sendKeysInto(merge.skipReason, faultReported.skipReason); 
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SUBMIT'), "Skip Payment Reason submit button");                
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE), faultReported.positiveResponseCWONACE);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Accept Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO), faultReported.positiveResponseCDTCEWO);
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(element(by.xpath("//app-appointment-modal//ion-datetime")), "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor repair visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCWOCE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCWOCE), faultReported.negativeResponseCWOCE);
        let notCompleteConfirmMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Works Order not complete confirmation message"); 
        expect(notCompleteConfirmMsg).toContainData(faultReported.woNotCompleteConfirmMsg); 
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Works Order not complete confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let faultStatusWONotComplete = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after works order not completed by contractor"); 
        expect(faultStatusWONotComplete).toContainData(faultReported.faultStatusAfterCWOCEResponse); 
        commonFunction.scrollToElement(this.faultActionStatus);
        let cwoceResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after works order not completed"); 
        expect(cwoceResponseFaultAction).toContainData(faultReported.faultActionCWOCEResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCWOCE));
        let responseSelectedCWOCE = commonFunction.updateVerificationObjectByAttrib(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCWOCE), "Submitted Response CWOCE", "color");
        expect(responseSelectedCWOCE).toContainData(faultReported.cwoceSubmittedResponse);
        commonFunction.scrollToElement(this.nextStepTxt);
        let nextStepText = commonFunction.updateVerificationObject(this.nextStepTxt, "Next Step after contractor response to CWOCE"); 
        expect(nextStepText).toContainData(faultReported.nextStepCWOCEResponse);                  
    }

    this.editWOVisitTime = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(merge.confirmedEstimateInput);
        commonFunction.sendKeysInto(merge.confirmedEstimateInput, faultDetails.confirmedEstimate);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed with Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(this.contractorInputWO);
        this.contractorInputWO.click();
        commonFunction.sendKeysInto(this.contractorInputWO, faultReported.contractorWO);
        commonFunction.waitForElementToBeVisible(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.clickOnElement(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SKIP PAYMENT'), "SKIP PAYMENT button");
        commonFunction.sendKeysInto(merge.skipReason, faultReported.skipReason); 
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SUBMIT'), "Skip Payment Reason submit button");                
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE), faultReported.positiveResponseCWONACE);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Accept Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCDTCEWO));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCDTCEWO), faultReported.negativeResponseCDTCEWO);
        let tenantNotContactableConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Tenant not contactable confirmation Message"); 
        expect(tenantNotContactableConfirmationMsg).toContainData(faultReported.tenantNotContactableConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Tenant not contactable confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(this.faultActionStatus);
        let cdtcewoResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after contractor response to CDTCEWO"); 
        expect(cdtcewoResponseFaultAction).toContainData(faultReported.faultActionCDTCEWOResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCDTCEWO));
        let responseSelectedCDTCEWO = commonFunction.updateVerificationObjectByAttrib(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCDTCEWO), "Submitted Response CDTCEWO", "color");
        expect(responseSelectedCDTCEWO).toContainData(faultReported.cdtcewoSubmittedResponse);
        commonFunction.scrollToElement(this.nextStepTxt);
        let nextStepText = commonFunction.updateVerificationObject(this.nextStepTxt, "Next Step after contractor response to CDTCEWO"); 
        expect(nextStepText).toContainData(faultReported.nextStepCDTCEWOResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', 'Add Date/Time'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Add Date/Time'), "Add Date/Time button");
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.scrollToElement(this.dateTimeBtn);
        commonFunction.mouseHover(commonFunction.getElementByCssContainingText('ion-label', 'In the morning'));
        let morningTimeSlot = commonFunction.updateVerificationObject(fSummary.tooltip, "In the morning time slot"); 
        expect(morningTimeSlot).toContainData(faultReported.morningSeesionTooltip);
        commonFunction.mouseHover(commonFunction.getElementByCssContainingText('ion-label', 'In the afternoon'));
        let afternoonTimeSlot = commonFunction.updateVerificationObject(fSummary.tooltip, "In the afternoon time slot"); 
        expect(afternoonTimeSlot).toContainData(faultReported.afternoonSeesionTooltip);
        commonFunction.mouseHover(commonFunction.getElementByCssContainingText('ion-label', 'In the evening'));
        let eveningTimeSlot = commonFunction.updateVerificationObject(fSummary.tooltip, "In the evening time slot"); 
        expect(eveningTimeSlot).toContainData(faultReported.eveningSeesionTooltip);
        commonFunction.clickOnElement(this.dateSessionBtn, faultReported.dateSession);       
        commonFunction.clickOnElement(this.dateTimeBtn, "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        commonFunction.scrollToElement(this.pastDateError);
        let retroDateMsg = commonFunction.updateVerificationObject(this.pastDateError, "Retrospective date warning"); 
        expect(retroDateMsg).toContainData(faultReported.pastDateError);       
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from works order schedule visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");    
        commonFunction.scrollToElement(fSummary.faultStatus);
        let faultStatusAfterAddVisitDate = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after visit date time is added"); 
        expect(faultStatusAfterAddVisitDate).toContainData(faultReported.faultStatusAfterAddVisitDateTime); 
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', 'Modify Date/Time'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Modify Date/Time'), "Modify Date/Time button");
        commonFunction.scrollToElement(this.dateEditSessionBtn);
        commonFunction.clickOnElement(this.dateEditSessionBtn, faultReported.editDateSession);
         //  commonFunction.scrollToElement(this.dateTimeBtn);
      //  commonFunction.clickOnElement(this.dateTimeBtn, "Date/Time Picker");
      //  commonFunction.setDate(faultReported.editVisitDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor quote visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status"); 
        commonFunction.scrollToElement(this.nextStepTxt);
        let editDateNextStepText = commonFunction.updateVerificationObject(this.nextStepTxt, "Next Step after visit time edit"); 
        expect(editDateNextStepText).toContainData(faultReported.editDateSession);              
    }
     
    this.changeRepairToLLOwnRepair = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(merge.confirmedEstimateInput);
        commonFunction.sendKeysInto(merge.confirmedEstimateInput, faultDetails.confirmedEstimate);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed with Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(this.contractorInputWO);
        this.contractorInputWO.click();
        commonFunction.sendKeysInto(this.contractorInputWO, faultReported.contractorWO);
        commonFunction.waitForElementToBeVisible(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.clickOnElement(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SKIP PAYMENT'), "SKIP PAYMENT button");
        commonFunction.sendKeysInto(merge.skipReason, faultReported.skipReason); 
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SUBMIT'), "Skip Payment Reason submit button");                
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('h6','Want to proceed in a different way?'));
        commonFunction.checkVisibleData('ion-button', faultReported.differentWayOptions, true, "Different way repair option is");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button',faultReported.differentRepair));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',faultReported.differentRepair), faultReported.differentRepair);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        let diffRepairConfirmMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Different Repair Confirmation Message1"); 
        expect(diffRepairConfirmMsg1).toContainData(faultReported.diffRepairConfirmationMsg1);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Different repair confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lrleFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after selecting CLI action LL Own Repair"); 
        expect(lrleFaultStatus).toContainData(faultReported.faultStatusLRLE);
        commonFunction.scrollToElement(this.faultActionStatus);
        let lrleFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after selecting CLI action LL Own Repair"); 
        expect(lrleFaultAction).toContainData(faultReported.faultActionLRLE);
        let lrleFaultActionSelected = commonFunction.updateVerificationObject(this.faultActionSelected, "Selected CLI Action"); 
        expect(lrleFaultActionSelected).toContainData(faultReported.cliActionSelected);
        commonFunction.scrollToElement(this.responseQuestion);
        let lrleFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "Question which requires an action"); 
        expect(lrleFaultActionQuestion).toContainData(faultReported.faultActionLRLEQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE), faultReported.positiveResponseLRLE);
        let repairConfirmationMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Repair Confirmation Message1"); 
        expect(repairConfirmationMsg1).toContainData(faultReported.llOwnRepairConfirmMsg1);
        let repairConfirmationMsg2 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Repair Confirmation Message2"); 
        expect(repairConfirmationMsg2).toContainData(faultReported.llOwnRepairConfirmMsg2);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Work In Progress confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lrleResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after landlord response to LRLE"); 
        expect(lrleResponseFaultStatus).toContainData(faultReported.faultStatusAfterLRLE);
        commonFunction.scrollToElement(this.faultActionStatus);
        let lrleResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after landlord response to LRLE"); 
        expect(lrleResponseFaultAction).toContainData(faultReported.faultActionLRLEResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE));
        let responseSelectedLRLE = commonFunction.updateVerificationObjectByAttrib(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE), "Submitted Response LRLE", "color");
        expect(responseSelectedLRLE).toContainData(faultReported.lrleSubmittedResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', "Add Contractor Details"));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "Add Contractor Details"),  "Add Contractor Details button");
        commonFunction.waitForElementToBeVisible(this.ccCompnay, "Add Contractor Details popup");
        commonFunction.sendKeysInto(this.ccCompnay, faultReported.ccCompany);
        commonFunction.sendKeysInto(this.ccName, faultReported.ccName);
        let rNo1 = Math.floor((Math.random() * 100000) + 1);
        let rNo2 = Math.floor((Math.random() * 10000) + 1);
        let telephone = parseInt(faultReported.ccTelephone, 10);
        commonFunction.sendKeysInto(this.ccTelephone, (telephone + rNo1 + rNo2).toString());
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(this.dateTimeBtnLLContractor, "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        let retroDateMsg = commonFunction.updateVerificationObject(this.pastDateErrorLLContractor, "Retrospective date warning"); 
        expect(retroDateMsg).toContainData(faultReported.pastDateErrorLLContractor);
        commonFunction.scrollToElement(this.ccConsentCheckbox);
        commonFunction.clickOnElement(this.ccConsentCheckbox, "Contractor consent checkbox");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "SAVE"),  "SAVE button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lcleFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after visit time scheduled"); 
        expect(lcleFaultStatus).toContainData(faultReported.faultStatusLCLE);
        commonFunction.scrollToElement(this.faultActionStatus);
        let lcleFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after visit time scheduled LCLE"); 
        expect(lcleFaultAction).toContainData(faultReported.faultActionLCLE);
        commonFunction.scrollToElement(this.responseQuestion);
        let lcleFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "Question which requires an action LCLE"); 
        expect(lcleFaultActionQuestion).toContainData(faultReported.faultActionLCLEQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLCLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLCLE), faultReported.positiveResponseLCLE);
        commonFunction.waitForElementToBeVisible(this.markJobCompletePopupTxt, "Mark Job Complete popup");
        let jobCompletePopupTitle = commonFunction.updateVerificationObject(this.markJobCompletePopupTitle, "Mark Job Complete popup title"); 
        expect(jobCompletePopupTitle).toContainData(faultReported.markJobCompleteTitle);
        let jobCompletePopupText = commonFunction.updateVerificationObject(this.markJobCompletePopupTxt, "Mark Job Complete popup text"); 
        expect(jobCompletePopupText).toContainData(faultReported.markJobCompleteTxt);
        commonFunction.clickOnElement(this.dateTimeBtn, "Date time picker");
        commonFunction.setDate(faultReported.jobCompleteDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','YES'), "Mark Job Complete popup Yes button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lfteFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after job is completed"); 
        expect(lfteFaultStatus).toContainData(faultReported.faultStatusLFTE);
        commonFunction.scrollToElement(this.faultActionStatus);
        let lfteFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after job is completed LFTE"); 
        expect(lfteFaultAction).toContainData(faultReported.faultActionLFTE);
        commonFunction.scrollToElement(this.responseQuestion);
        let lfteFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "Question which requires an action LFTE"); 
        expect(lfteFaultActionQuestion).toContainData(faultReported.faultActionLFTEQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLFTE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLFTE), faultReported.positiveResponseLFTE);
        let tenantSatisfyConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Tenant satisfied and fault closure Confirmation Message"); 
        expect(tenantSatisfyConfirmationMsg).toContainData(faultReported.tenantSatisfyConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Tenant satisfied and fault closure confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(this.faultActionStatus);
        let lfteResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after tenant is satisfied"); 
        expect(lfteResponseFaultAction).toContainData(faultReported.faultActionAfterLFTE);
        let lfteResponseNextAction = commonFunction.updateVerificationObject(this.actionAfterLFTE, "Next Action after tenant is satisfied"); 
        expect(lfteResponseNextAction).toContainData(faultReported.faultNextActionAfterLFTE);
        commonFunction.scrollToElement(this.displayedReason);
        let closeReasonDisplayed = commonFunction.updateVerificationObject(this.displayedReason, "Fault closure reason"); 
        expect(closeReasonDisplayed).toContainData(faultReported.faultCloseReason);  
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lfteResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after tenant is satisfied"); 
        expect(lfteResponseFaultStatus).toContainData(faultReported.faultStatusAfterLFTE);
    }
}
module.exports = WorksOrder;
