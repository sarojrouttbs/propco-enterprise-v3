var commonUtil = require('../../../util/common.util.page');
var commonFunction = new commonUtil();
var fault = require('../igf-logfault/add.fault.page');
var faultSummary = require('../igf-logfault/fault.summary.page');
var mergeFault = require('../igf-logfault/merge.fault.page');

var CheckInvoice = function (faultDetails) {
    
    /**
     * Locators for elements used in 'Check Invoice' functionality
     */ 
    
    this.nextStepTxt = element(by.xpath("//h4[contains(text(),'Next Step')]/following-sibling::h6"));
    this.invoiceAmountNextStep = element(by.xpath("//h4[contains(text(),'Next Step')]/following-sibling::h6/b"));
    this.invoiceAmountNoteNextStep = element(by.xpath("//ion-text[contains(text(),'Note:')]/following-sibling::span/b"));
    this.invoiceAmountQuestion = element(by.xpath("//h4[contains(text(),'Next Step')]/following-sibling::h6[2]"));
    this.rejectInvoicePopupMsg = element(by.xpath("//app-reject-invoice//h6[2]"));
    this.rejectionReason = element(by.xpath("//ion-textarea[contains(@formcontrolname, 'rejectionReason')]/div/textarea"));
    this.rejectionReasonError = element(by.xpath("//ion-textarea[contains(@formcontrolname, 'rejectionReason')]/../following-sibling::app-validation-message/div"));
   
    this.paymentNextStep = element(by.xpath("//app-payment//h6[1]/b"));
    this.paymentNoteNextStep = element(by.xpath("//app-payment//h6[2]/ion-text[2]"));
    this.contractorError = element(by.xpath("//ion-input[contains(@formcontrolname, 'contractorName')]/../following-sibling::app-validation-message/div"));
   
   
    this.invoiceAmount = element(by.xpath("//input[contains(@formcontrolname, 'invoiceAmount')]"));
    this.uploadInvoice = element(by.xpath("//input[@id='docFiles']"));
    this.proceedBtn = element(by.xpath("//ion-button[contains(text(),  'Proceed') and contains(@class, 'submit-button')]"));
    this.faultActionStatus = element(by.css("div.banner > h2.banner-heading")); 
    this.faultActionSelected = element(by.xpath("//h6[contains(text(), 'the action you chose')]/following-sibling::ion-button"));
    this.responseQuestion = element(by.css("div.question-answer > h6.ng-star-inserted"));
    this.dateTimeTypeList = element(by.xpath("//ion-select[contains(@formcontrolname, 'dateTimeType')]"));
    this.dateTimeType = element(by.xpath("//ion-label[contains(text(), '" + faultDetails.dateTimeType + "')]/following-sibling::ion-radio"));
    this.dateTimeBtn = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'dateTime')]"));
    this.contractorInputWO = element(by.xpath("//ion-input[@formcontrolname = 'contractorName']/input"));
    this.contractorSearchValue = element(by.xpath("//label[contains(text(), '" + faultDetails.contractorWOSearchResult + "')]/.."));
    this.repairCost = element(by.xpath("//input[@formcontrolname = 'repairCost']"));
    this.dateTimeBtnJobComplete = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'jobCompletionAt')]"));
    this.noteTxt1 = element(by.xpath("//ion-text[contains(text(), 'Note')]/following-sibling::span[1]"));
    this.noteTxt2 = element(by.xpath("//ion-text[contains(text(), 'Note')]/following-sibling::span[2]"));
    
    this.faultTitle = element(by.xpath("(//h2[contains(text(), '" + faultDetails.title + "')])[2]")); 
    
    this.reviewInvoice = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(merge.confirmedEstimateInput);
        commonFunction.sendKeysInto(merge.confirmedEstimateInput, faultDetails.confirmedEstimate);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed with Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(this.contractorInputWO);
        this.contractorInputWO.click();
        commonFunction.sendKeysInto(this.contractorInputWO, faultReported.contractorWO);
        commonFunction.waitForElementToBeVisible(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.clickOnElement(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SKIP PAYMENT'), "SKIP PAYMENT button");
        commonFunction.sendKeysInto(merge.skipReason, faultReported.skipReason); 
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SUBMIT'), "Skip Payment Reason submit button");                
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");        
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE), faultReported.positiveResponseCWONACE);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Accept Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO), faultReported.positiveResponseCDTCEWO);
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(element(by.xpath("//app-appointment-modal//ion-datetime")), "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor repair visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWOCE), faultReported.positiveResponseCWOCE);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWOCE), faultReported.positiveResponseCWOCE);
        commonFunction.clickOnElement(this.dateTimeBtnJobComplete, "Date time picker");
        commonFunction.setDate(faultReported.jobCompleteDateValue);
        commonFunction.sendKeysInto(this.invoiceAmount, faultReported.repairAmount);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Submit'),"Invoice Upload Submit button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCFTE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCFTE), faultReported.positiveResponseCFTE);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Tenant satisfied confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cfteResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after tenant is satisfied"); 
        expect(cfteResponseFaultStatus).toContainData(faultReported.faultStatusAfterCFTE);
        commonFunction.scrollToElement(this.nextStepTxt);
        let cfteResponseNextStep = commonFunction.updateVerificationObject(this.nextStepTxt, "Next Step after tenant is satisfied"); 
        expect(cfteResponseNextStep).toContainData(faultReported.cfteResponseNextStep);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button','Upload Invoice'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','Upload Invoice'),"Upload Invoice/Photo button");
        commonFunction.scrollToElement(this.uploadInvoice);
        commonFunction.uploadImage(this.uploadInvoice, faultReported.invoiceDoc, "Invoice document");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','Submit'),"Upload Invoice/Photo Submit button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let invoiceUploadFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after invoice is uploaded"); 
        expect(invoiceUploadFaultStatus).toContainData(faultReported.invoiceUploadFaultStatus);
        commonFunction.scrollToElement(this.noteTxt1);
        let note1 = commonFunction.updateVerificationObject(this.noteTxt1, "Text to be noted"); 
        expect(note1).toContainData(faultReported.note1); 
        commonFunction.scrollToElement(this.invoiceAmountNextStep);
        let invoiceAmountNextStep = commonFunction.updateVerificationObject(this.invoiceAmountNextStep, "Next Step invoice amount"); 
        expect(invoiceAmountNextStep).toContainData(faultReported.invoiceAmountNextStep);
        let invoiceNoteNextStep = commonFunction.updateVerificationObject(this.invoiceAmountNoteNextStep, "Next Step invoice amount note"); 
        expect(invoiceNoteNextStep).toContainData(faultReported.invoiceAmountNoteNextStep);
        let invoiceQuestion = commonFunction.updateVerificationObject(this.invoiceAmountQuestion, "Invoice Question that needs an action"); 
        expect(invoiceQuestion).toContainData(faultReported.invoiceAmountQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button','Reject this Invoice'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','Reject this Invoice'),"Reject this Invoice button");
        let rejectInvoicePopupMsg = commonFunction.updateVerificationObject(this.rejectInvoicePopupMsg, "Reject invoice popup message"); 
        expect(rejectInvoicePopupMsg).toContainData(faultReported.rejectInvoiceMsg);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','YES'),"Reject Invoice popup YES button");
        let rejectionReasonError = commonFunction.updateVerificationObject(this.rejectionReasonError, "Rejection Reason error message"); 
        expect(rejectionReasonError).toContainData(faultReported.errorMsg);
        commonFunction.sendKeysInto(this.rejectionReason, faultReported.rejectionReason);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','YES'),"Reject Invoice popup YES button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let invoiceRejectedFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after invoice is rejected"); 
        expect(invoiceRejectedFaultStatus).toContainData(faultReported.invoiceRejectedFaultStatus);
        commonFunction.scrollToElement(this.faultActionStatus);
        let irceFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "IRCE - Fault Action after invoice is rejected"); 
        expect(irceFaultAction).toContainData(faultReported.faultActionIRCE);
        commonFunction.scrollToElement(this.responseQuestion);
        let irceQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "IRCE - Question which requires an action"); 
        expect(irceQuestion).toContainData(faultReported.faultActionIRCEQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button','Upload a new invoice'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','Upload a new invoice'), "Upload a new invoice button");
        commonFunction.scrollToElement(this.uploadInvoice);
        commonFunction.uploadImage(this.uploadInvoice, faultReported.invoiceDoc, "Invoice document");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','Submit'),"Upload Invoice/Photo Submit button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let irceResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after invoice is uploaded again"); 
        expect(irceResponseFaultStatus).toContainData(faultReported.irceResponseFaultStatus);
        commonFunction.scrollToElement(this.faultActionStatus);
        let irceResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after contractor response to IRCE"); 
        expect(irceResponseFaultAction).toContainData(faultReported.faultActionIRCEResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', 'Upload a new invoice'));
        let responseSelectedIRCE = commonFunction.updateVerificationObjectByAttrib(commonFunction.getElementByCssContainingText('ion-button', 'Upload a new invoice'), "Submitted Response IRCE", "color");
        expect(responseSelectedIRCE).toContainData(faultReported.irceSubmittedResponse);      
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button','Yes, Approve this Invoice'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','Yes, Approve this Invoice'),"Approve Invoice button");
        let approveInvoiceConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Approve Invoice Confirmation Message"); 
        expect(approveInvoiceConfirmationMsg).toContainData(faultReported.invoiceApproveConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Approve Invoice confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let approveResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after invoice is approved"); 
        expect(approveResponseFaultStatus).toContainData(faultReported.faultStatusAfterInvoiceApproval);
        commonFunction.scrollToElement(this.faultActionStatus);
        let paymentFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after invoice is approved"); 
        expect(paymentFaultAction).toContainData(faultReported.faultActionInvoiceApproved);
        commonFunction.scrollToElement(this.paymentNextStep);
        let paymentNextStep = commonFunction.updateVerificationObject(this.paymentNextStep, "Awaiting Payment : Next Step"); 
        expect(paymentNextStep).toContainData(faultReported.paymentNextStep);
        let paymentNoteNextStep = commonFunction.updateVerificationObject(this.paymentNoteNextStep, "Awaiting Payment : Next Step Note"); 
        expect(paymentNoteNextStep).toContainData(faultReported.paymentNoteNextStep);
    }
}
module.exports = CheckInvoice;
