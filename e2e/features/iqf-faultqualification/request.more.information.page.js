var commonUtil = require('../../util/common.util.page');
var commonFunction = new commonUtil();
var faultSummary = require('../igf-logfault/fault.summary.page');
var mergeFault = require('../igf-logfault/merge.fault.page');

var RequestMoreInfo = function (faultDetails) {
    
    /**
     * Locators for elements used in 'Request More Information' functionality
     */ 
    
    this.bmYesBtn = element(by.xpath("//ion-radio-group[@formcontrolname='isUnderBlockManagement']//ion-label[contains(text(),'Yes')]/preceding-sibling::ion-radio"));
    this.bmNoBtn = element(by.xpath("//ion-radio-group[@formcontrolname='isUnderBlockManagement']//ion-label[contains(text(),'No')]/preceding-sibling::ion-radio"));
   
    this.invoiceAmount = element(by.xpath("//input[contains(@formcontrolname, 'invoiceAmount')]"));
    this.uploadInvoice = element(by.xpath("//input[@id='docFiles']"));
    this.proceedBtn = element(by.xpath("//ion-button[contains(text(),  'Proceed') and contains(@class, 'submit-button')]"));
    this.faultActionStatus = element(by.css("div.banner > h2.banner-heading")); 
    this.faultActionSelected = element(by.xpath("//h6[contains(text(), 'the action you chose')]/following-sibling::ion-button"));
    this.responseQuestion = element(by.css("div.question-answer > h6.ng-star-inserted"));
    this.dateTimeTypeList = element(by.xpath("//ion-select[contains(@formcontrolname, 'dateTimeType')]"));
    this.dateTimeType = element(by.xpath("//ion-label[contains(text(), '" + faultDetails.dateTimeType + "')]/following-sibling::ion-radio"));
    this.dateTimeBtn = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'dateTime')]"));
    this.dateTimeDoneBtn = element(by.xpath("//button[contains(text(), 'Done')]"));
    this.dateSessionBtn = element(by.xpath("//ion-label[contains(text(), '" + faultDetails.dateSession + "')]/following-sibling::ion-radio"));
    this.dateEditSessionBtn = element(by.xpath("//ion-label[contains(text(), '" + faultDetails.editDateSession + "')]/following-sibling::ion-radio"));
    this.pastDateError = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'dateTime')]/../following-sibling::ion-text"));
    this.contractorInputWO = element(by.xpath("//ion-input[@formcontrolname = 'contractorName']/input"));
    this.contractorSearchValue = element(by.xpath("//label[contains(text(), '" + faultDetails.contractorWOSearchResult + "')]/.."));
    this.repairCost = element(by.xpath("//input[@formcontrolname = 'repairCost']"));
    this.dateTimeBtnJobComplete = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'jobCompletionAt')]"));
    this.nextStepTxt = element(by.xpath("//ion-text[contains(text(), 'Please note')]/.."));
  
    this.faultTitle = element(by.xpath("(//h2[contains(text(), '" + faultDetails.title + "')])[2]")); 
    this.ccCompnay = element(by.xpath("//ion-input[contains(@formcontrolname, 'company')]/input"));
    this.ccName = element(by.xpath("//ion-input[contains(@formcontrolname, 'name')]/input"));
    this.ccTelephone = element(by.xpath("//ion-input[contains(@formcontrolname, 'telephone')]/input"));
    this.ccEmail = element(by.xpath("//ion-input[contains(@formcontrolname, 'email')]/input"));
    this.dateTimeBtnLLContractor = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'estimatedVisitAt')]"));
    this.pastDateErrorLLContractor = element(by.xpath("//ion-label[contains(text(), 'Visit Date')]/../following-sibling::ion-text"));
    this.ccConsentCheckbox = element(by.xpath("//ion-checkbox[contains(@formcontrolname, 'hasContractorConsent')]"));
    this.markJobCompletePopupTitle = element(by.css("ion-title.title-default"));
    this.markJobCompletePopupTxt = element(by.css("app-job-completion-modal > ion-content > form > ion-grid > ion-row > ion-col > h6"));
    this.actionAfterLFTE = element(by.xpath("//app-close-fault//h3"));
    this.displayedReason = element(by.xpath("//app-close-fault//h5"));
    
    this.completeRepairAfterMoreInfo = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', 'Request More Info'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Request More Info'), 'Request More Info button');
        let requestInfoConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Request More Info Confirmation Message"); 
        expect(requestInfoConfirmationMsg).toContainData(faultReported.requestMoreInfoConfirmMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Request More Info confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");        
        commonFunction.scrollToElement(fSummary.faultStatus);
        let moreInfoFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after more info is requested"); 
        expect(moreInfoFaultStatus).toContainData(faultReported.faultStatusFITE); 
        commonFunction.scrollToElement(this.faultActionStatus);           
        let fiteFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after more info is requested"); 
        expect(fiteFaultAction).toContainData(faultReported.faultActionFITE);
        commonFunction.scrollToElement(this.responseQuestion);
        let fiteFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "FITE - Question which requires an action"); 
        expect(fiteFaultActionQuestion).toContainData(faultReported.faultActionFITEQuestion);        
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        let missingResponseMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Missing Response Message"); 
        expect(missingResponseMsg).toContainData(faultReported.missingResponseMsg);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('span', 'OK'), 'Missing response message OK button');
        commonFunction.scrollToElement(this.bmYesBtn);
        commonFunction.clickOnElement(this.bmYesBtn, "Block Management Yes button");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        missingResponseMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Missing Response Message"); 
        expect(missingResponseMsg).toContainData(faultReported.missingResponseMsg);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('span', 'OK'), 'Missing response message OK button');
        commonFunction.waitForElementToBeVisible(this.proceedBtn);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-row.ion-justify-content-center > ion-button:nth-child(1)', faultReported.positiveResponseFITE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-row.ion-justify-content-center > ion-button:nth-child(1)', faultReported.positiveResponseFITE), faultReported.positiveResponseFITE);
        let moreInfoYesConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Request More Info Yes Confirmation Message"); 
        expect(moreInfoYesConfirmationMsg).toContainData(faultReported.moreInfoYesConfirmMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Request More Info Yes confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");        
        commonFunction.scrollToElement(fSummary.faultStatus);
        let fiteYesResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after more info is received"); 
        expect(fiteYesResponseFaultStatus).toContainData(faultReported.faultStatusYesResponseFITE); 
        commonFunction.scrollToElement(this.faultActionStatus);           
        fiteFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after more info is received"); 
        expect(fiteFaultAction).toContainData(faultReported.faultActionYesResponseFITE);
        commonFunction.scrollToElement(this.responseQuestion);
        let responseSelectedFITE = commonFunction.updateVerificationObjectByAttrib(commonFunction.getElementByCssContainingText('ion-row.ion-justify-content-center > ion-button:nth-child(1)', faultReported.positiveResponseFITE), "Submitted Positive Response FITE", "color");
        expect(responseSelectedFITE).toContainData(faultReported.fiteSubmittedResponse);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cliFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after reaching to CLI stage"); 
        expect(cliFaultStatus).toContainData(faultReported.cliUpdatedStatus); 
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(merge.confirmedEstimateInput);
        commonFunction.sendKeysInto(merge.confirmedEstimateInput, faultDetails.confirmedEstimate);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        let woConfirmationMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Proceed with Works Order Confirmation Message1"); 
        expect(woConfirmationMsg1).toContainData(faultReported.cliStageSelectionConfirmMsg1);
        let woConfirmationMsg2 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Proceed with Works Order Confirmation Message2"); 
        expect(woConfirmationMsg2).toContainData(faultReported.cliStageSelectionConfirmMsg2);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed with Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(this.contractorInputWO);
        this.contractorInputWO.click();
        commonFunction.sendKeysInto(this.contractorInputWO, faultReported.contractorWO);
        commonFunction.waitForElementToBeVisible(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.clickOnElement(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SKIP PAYMENT'), "SKIP PAYMENT button");
        commonFunction.sendKeysInto(merge.skipReason, faultReported.skipReason); 
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SUBMIT'), "Skip Payment Reason submit button");                
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");        
        commonFunction.scrollToElement(fSummary.faultStatus);
        let woRaisedFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after Works Order raised"); 
        expect(woRaisedFaultStatus).toContainData(faultReported.faultStatusCWONACE); 
        commonFunction.scrollToElement(this.faultActionStatus);           
        let cwonaceFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after Works Order raised"); 
        expect(cwonaceFaultAction).toContainData(faultReported.faultActionCWONACE);
        commonFunction.scrollToElement(this.responseQuestion);
        let cwonaceFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "CWONACE - Question which requires an action"); 
        expect(cwonaceFaultActionQuestion).toContainData(faultReported.faultActionCWONACEQuestion);       
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE), faultReported.positiveResponseCWONACE);
        let woAcceptConfirmationMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Works Order Accept Confirmation Message"); 
        expect(woAcceptConfirmationMsg1).toContainData(faultReported.woAcceptConfirmMsg);        
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Accept Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let woAcceptedFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after Works Order accepted"); 
        expect(woAcceptedFaultStatus).toContainData(faultReported.faultStatusCDTCEWO); 
        commonFunction.scrollToElement(this.faultActionStatus);           
        let cdtcewoFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after Works Order accepted"); 
        expect(cdtcewoFaultAction).toContainData(faultReported.faultActionCDTCEWO);
        commonFunction.scrollToElement(this.responseQuestion);
        let cdtcewoFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "CDTCEWO - Question which requires an action"); 
        expect(cdtcewoFaultActionQuestion).toContainData(faultReported.faultActionCDTCEWOQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO), faultReported.positiveResponseCDTCEWO);
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(element(by.xpath("//app-appointment-modal//ion-datetime")), "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        let retroDateMsg = commonFunction.updateVerificationObject(this.pastDateError, "Retrospective date warning"); 
        expect(retroDateMsg).toContainData(faultReported.pastDateError);       
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor repair visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cwoceFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after scheduled visit time"); 
        expect(cwoceFaultStatus).toContainData(faultReported.faultStatusCWOCE); 
        commonFunction.scrollToElement(this.faultActionStatus);           
        let cwoceFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after scheduled visit time"); 
        expect(cwoceFaultAction).toContainData(faultReported.faultActionCWOCE);
        commonFunction.scrollToElement(this.responseQuestion);
        let cwoceFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "CWOCE - Question which requires an action"); 
        expect(cwoceFaultActionQuestion).toContainData(faultReported.faultActionCWOCEQuestion);       
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWOCE), faultReported.positiveResponseCWOCE);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWOCE), faultReported.positiveResponseCWOCE);
        commonFunction.clickOnElement(this.dateTimeBtnJobComplete, "Date time picker");
        commonFunction.setDate(faultReported.jobCompleteDateValue);
        commonFunction.sendKeysInto(this.invoiceAmount, faultReported.repairAmount);
        commonFunction.scrollToElement(this.uploadInvoice);
        commonFunction.uploadImage(this.uploadInvoice, faultReported.invoiceDoc, "Invoice document");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Submit'),"Invoice Upload Submit button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cfteFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after job is completed"); 
        expect(cfteFaultStatus).toContainData(faultReported.faultStatusCFTE);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCFTE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCFTE), faultReported.positiveResponseCFTE);
        let tenantSatisfyConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Tenant satisfied Confirmation Message"); 
        expect(tenantSatisfyConfirmationMsg).toContainData(faultReported.tenantSatisfyConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Tenant satisfied confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cfteResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after tenant is satisfied"); 
        expect(cfteResponseFaultStatus).toContainData(faultReported.faultStatusAfterCFTE);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button','Yes, Approve this Invoice'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','Yes, Approve this Invoice'),"Approve Invoice button");
        let approveInvoiceConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Approve Invoice Confirmation Message"); 
        expect(approveInvoiceConfirmationMsg).toContainData(faultReported.invoiceApproveConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Approve Invoice confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let approveResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after invoice is approved"); 
        expect(approveResponseFaultStatus).toContainData(faultReported.faultStatusAfterInvoiceApproval);        
    }

    this.receiveNoInfo = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', 'Request More Info'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Request More Info'), 'Request More Info button');
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Request More Info confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");        
        commonFunction.scrollToElement(fSummary.faultStatus);
        let moreInfoFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after more info is requested"); 
        expect(moreInfoFaultStatus).toContainData(faultReported.faultStatusFITE); 
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-row.ion-justify-content-center > ion-button:nth-child(2)', faultReported.negativeResponseFITE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-row.ion-justify-content-center > ion-button:nth-child(2)', faultReported.negativeResponseFITE), faultReported.negativeResponseFITE);
        let moreInfoNoConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "No Info confirmation message"); 
        expect(moreInfoNoConfirmationMsg).toContainData(faultReported.moreInfoNoConfirmMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "No Info confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");        
        commonFunction.scrollToElement(fSummary.faultStatus);
        let fiteNoResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after 'No Info' response is submitted"); 
        expect(fiteNoResponseFaultStatus).toContainData(faultReported.faultStatusNoResponseFITE); 
        commonFunction.scrollToElement(this.faultActionStatus);           
        fiteFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after 'No Info' response is submitted"); 
        expect(fiteFaultAction).toContainData(faultReported.faultActionNoResponseFITE);
        commonFunction.scrollToElement(this.responseQuestion);
        let responseSelectedFITE = commonFunction.updateVerificationObjectByAttrib(commonFunction.getElementByCssContainingText('ion-row.ion-justify-content-center > ion-button:nth-child(2)', faultReported.negativeResponseFITE), "Submitted Response FITE", "color");
        expect(responseSelectedFITE).toContainData(faultReported.fiteSubmittedResponse);
        commonFunction.scrollToElement(this.nextStepTxt);
        let nextStepText = commonFunction.updateVerificationObject(this.nextStepTxt, "Next Step after 'No Info' response is submitted"); 
        expect(nextStepText).toContainData(faultReported.nextStepFITEResponse);    
        commonFunction.scrollToElement(this.proceedBtn);
        let proceedBtnStatus = commonFunction.updateVerificationObjectByAttrib(this.proceedBtn, "Proceed button disabled", "aria-disabled");
        expect(proceedBtnStatus).toContainData(faultReported.proceedBtnStatus);  
    }   
     
    this.changeRepairToLLOwnRepair = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', 'Request More Info'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Request More Info'), 'Request More Info button');
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Request More Info confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");        
        commonFunction.scrollToElement(fSummary.faultStatus);
        let moreInfoFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after more info is requested"); 
        expect(moreInfoFaultStatus).toContainData(faultReported.faultStatusFITE);    
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('h6','Want to proceed in a different way?'));
        commonFunction.checkVisibleData('ion-button', faultReported.differentWayOptions, true, "Different way repair option is");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button',faultReported.differentRepair));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',faultReported.differentRepair), faultReported.differentRepair);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        let diffRepairConfirmMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Different Repair Confirmation Message"); 
        expect(diffRepairConfirmMsg1).toContainData(faultReported.diffRepairConfirmationMsg1);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Different repair confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cliFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after reaching to CLI stage"); 
        expect(cliFaultStatus).toContainData(faultReported.cliUpdatedStatus); 
        commonFunction.scrollToElement(this.faultActionStatus);
        commonFunction.checkVisibleData('ion-button', faultReported.cliOptions, true, "CLI repair option is");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        let llRepairConfirmationMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "LL Own Repair Confirmation Message1"); 
        expect(llRepairConfirmationMsg1).toContainData(faultReported.cliOwnRepairConfirmMsg1);
        let llRepairConfirmationMsg2 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "LL Own Repair Confirmation Message2"); 
        expect(llRepairConfirmationMsg2).toContainData(faultReported.cliOwnRepairConfirmMsg2);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to LL Own Repair confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);      
        let lrleFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after selecting CLI action LL Own Repair"); 
        expect(lrleFaultStatus).toContainData(faultReported.faultStatusLRLE);
        commonFunction.scrollToElement(this.faultActionStatus);
        commonFunction.scrollToElement(this.responseQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE), faultReported.positiveResponseLRLE);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Work In Progress confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lrleResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after landlord response to LRLE"); 
        expect(lrleResponseFaultStatus).toContainData(faultReported.faultStatusAfterLRLE);
        commonFunction.scrollToElement(this.faultActionStatus);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE));
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', "Add Contractor Details"));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "Add Contractor Details"),  "Add Contractor Details button");
        commonFunction.waitForElementToBeVisible(this.ccCompnay, "Add Contractor Details popup");
        commonFunction.sendKeysInto(this.ccCompnay, faultReported.ccCompany);
        commonFunction.sendKeysInto(this.ccName, faultReported.ccName);
        let rNo1 = Math.floor((Math.random() * 100000) + 1);
        let rNo2 = Math.floor((Math.random() * 10000) + 1);
        let telephone = parseInt(faultReported.ccTelephone, 10);
        commonFunction.sendKeysInto(this.ccTelephone, (telephone + rNo1 + rNo2).toString());
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(this.dateTimeBtnLLContractor, "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        commonFunction.scrollToElement(this.ccConsentCheckbox);
        commonFunction.clickOnElement(this.ccConsentCheckbox, "Contractor consent checkbox");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "SAVE"),  "SAVE button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lcleFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after visit time scheduled"); 
        expect(lcleFaultStatus).toContainData(faultReported.faultStatusLCLE);
        commonFunction.scrollToElement(this.faultActionStatus);
        commonFunction.scrollToElement(this.responseQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLCLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLCLE), faultReported.positiveResponseLCLE);
        commonFunction.waitForElementToBeVisible(this.markJobCompletePopupTxt, "Mark Job Complete popup");
        let jobCompletePopupText = commonFunction.updateVerificationObject(this.markJobCompletePopupTxt, "Mark Job Complete popup text"); 
        expect(jobCompletePopupText).toContainData(faultReported.markJobCompleteTxt);
        commonFunction.clickOnElement(this.dateTimeBtn, "Date time picker");
        commonFunction.setDate(faultReported.jobCompleteDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','YES'), "Mark Job Complete popup Yes button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lfteFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after job is completed"); 
        expect(lfteFaultStatus).toContainData(faultReported.faultStatusLFTE);
        commonFunction.scrollToElement(this.faultActionStatus);
        commonFunction.scrollToElement(this.responseQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLFTE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLFTE), faultReported.positiveResponseLFTE);
        let tenantSatisfyConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Tenant satisfied and fault closure Confirmation Message"); 
        expect(tenantSatisfyConfirmationMsg).toContainData(faultReported.tenantSatisfyConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Tenant satisfied and fault closure confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(this.faultActionStatus);
        commonFunction.scrollToElement(this.displayedReason);
        let closeReasonDisplayed = commonFunction.updateVerificationObject(this.displayedReason, "Fault closure reason"); 
        expect(closeReasonDisplayed).toContainData(faultReported.faultCloseReason);  
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lfteResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after tenant is satisfied"); 
        expect(lfteResponseFaultStatus).toContainData(faultReported.faultStatusAfterLFTE);
    }
}
module.exports = RequestMoreInfo;
