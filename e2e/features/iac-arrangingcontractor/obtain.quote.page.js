var commonUtil = require('../../util/common.util.page');
var commonFunction = new commonUtil();
var fault = require('../igf-logfault/add.fault.page');
var faultSummary = require('../igf-logfault/fault.summary.page');
var mergeFault = require('../igf-logfault/merge.fault.page');

var ObtainQuote = function (faultDetails) {
    
    /**
     * Locators for elements used in 'Obtain Quote' functionality
     */ 
   
    this.nominalCodeError = element(by.xpath("//ionic-selectable[contains(@formcontrolname, 'nominalCode')]/../following-sibling::app-validation-message/div"));
    this.requiredByDateError = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'requiredDate')]/../following-sibling::app-validation-message/div"));
    this.contractorAddBtn = element(by.xpath("//ion-icon[contains(@name, 'add-sharp')]"));
    this.contractorAddError = element(by.xpath("//ion-input[contains(@formcontrolname, 'contractor')]/../following-sibling::ion-text"));
    this.quoteStatus = element(by.xpath("//ion-text[contains(text(), 'Quote Status')]/following-sibling::ion-text/strong"));
    this.quoteScreenMsg1 = element(by.xpath("//div[contains(@class, 'quote-request-banner')]/ion-text[1]"));
    this.quoteScreenMsg2 = element(by.xpath("//div[contains(@class, 'quote-request-banner')]/ion-text[2]"));
    this.contractorRejectionReasonList = element(by.xpath("//ion-select[contains(@formcontrolname, 'rejectionReason')]"));
    this.contractorRejectionReason = element(by.xpath("//ion-label[contains(text(), '" + faultDetails.contractorRejectionReason + "')]/following-sibling::ion-radio"));
    this.contractorRejectOtherReason = element(by.xpath("//textarea[contains(@placeholder, 'Comment')]")); 
    this.quoteAmountTab = element(by.xpath("//ion-segment-button[contains(@value, 'quote')]"));
    this.quotePhotoTab = element(by.xpath("//ion-segment-button[contains(@value, 'photo')]"));
    this.landlordRejectionReasonList = element(by.xpath("//ion-select[contains(@formcontrolname, 'rejectionReason')]"));
    this.landlordRejectionReason = element(by.xpath("//ion-label[contains(text(), '" + faultDetails.landlordRejectionReason + "')]/following-sibling::ion-radio"));
    this.landlordRejectOtherReason = element(by.xpath("//textarea[contains(@placeholder, 'Comment')]")); 
    this.proceedBtn = element(by.xpath("//ion-button[contains(text(),  'Proceed') and contains(@class, 'submit-button')]"));
    this.faultActionStatus = element(by.css("div.banner > h2.banner-heading")); 
    this.faultActionSelected = element(by.xpath("//h6[contains(text(), 'the action you chose')]/following-sibling::ion-button"));
    this.responseQuestion = element(by.css("div.question-answer > h6.ng-star-inserted"));
    this.dateTimeTypeList = element(by.xpath("//ion-select[contains(@formcontrolname, 'dateTimeType')]"));
    this.dateTimeType = element(by.xpath("//ion-label[contains(text(), '" + faultDetails.dateTimeType + "')]/following-sibling::ion-radio"));
    this.dateTimeBtn = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'dateTime')]"));
    this.dateTimeDoneBtn = element(by.xpath("//button[contains(text(), 'Done')]"));
    this.dateSessionBtn = element(by.xpath("//ion-label[contains(text(), '" + faultDetails.dateSession + "')]/following-sibling::ion-radio"));
    this.dateEditSessionBtn = element(by.xpath("//ion-label[contains(text(), '" + faultDetails.editDateSession + "')]/following-sibling::ion-radio"));
    this.pastDateError = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'dateTime')]/../following-sibling::ion-text"));
    this.contractorInputWO = element(by.xpath("//ion-input[@formcontrolname = 'contractorName']/input"));
    this.contractorSearchValue = element(by.xpath("//label[contains(text(), '" + faultDetails.contractorWOSearchResult + "')]/.."));
    this.repairCost = element(by.xpath("//input[@formcontrolname = 'repairCost']"));
    this.dateTimeBtnJobComplete = element(by.xpath("//ion-datetime[contains(@formcontrolname, 'jobCompletionAt')]"));
    this.nextStepTxt = element(by.xpath("//ion-text[contains(text(), 'Please note')]/.."));
    this.contractorBlock = element(by.css("div.contractor-block"));
    this.faultTitle = element(by.xpath("(//h2[contains(text(), '" + faultDetails.title + "')])[2]"));   

    
    this.completeQuoteRepair = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cliFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after reaching to CLI stage"); 
        expect(cliFaultStatus).toContainData(faultReported.cliUpdatedStatus); 
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        let obtainQuoteConfirmationMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Obtain Quote Confirmation Message1"); 
        expect(obtainQuoteConfirmationMsg1).toContainData(faultReported.cliStageSelectionConfirmMsg1);
        let obtainQuoteConfirmationMsg2 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Obtain Quote Confirmation Message2"); 
        expect(obtainQuoteConfirmationMsg2).toContainData(faultReported.cliStageSelectionConfirmMsg2);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to Obtain Quote confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.contractorBlock, "Contractor list");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let diffRepairFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after Obtain Quote selection"); 
        expect(diffRepairFaultStatus).toContainData(faultReported.faultStatusQuoteForm); 
        commonFunction.scrollToElement(this.contractorBlock);
        if(faultReported.contractorList){
           let contractors = faultReported.contractorList.split(",");
           contractors.forEach(function(contractor){
               commonFunction.scrollToElement(element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-checkbox")));
               commonFunction.clickOnElement(element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-checkbox")), contractor + " select button");
           });
        }
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(merge.requiredByDate);
        commonFunction.clickOnElement(merge.requiredByDate, "Required By Date picker");
        commonFunction.clickOnElement(merge.requiredByDateDoneBtn, "Required By Date Done button");
        commonFunction.waitForElementToBeVisible(merge.requiredByDate, "Required By Date");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        let quoteRequestConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Send Quote Request Confirmation Message"); 
        expect(quoteRequestConfirmationMsg).toContainData(faultReported.sendQuoteRequestConfirmMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Obtain Quote confirmation OK button");
        browser.sleep(2000);        
        let toastMsg = commonFunction.updateVerificationObject(browser.driver.findElement(by.css('div.toast-message')), "Quote request sent message"); 
        expect(toastMsg).toContainData(faultReported.quoteRequestSentMsg);   
        commonFunction.waitForElementToBeVisible(this.contractorBlock, "Contractor list");
        let quoteScreenMsg1 = commonFunction.updateVerificationObject(this.quoteScreenMsg1, "Quote Screen Message1"); 
        expect(quoteScreenMsg1).toContainData(faultReported.quoteScreenMsg1);
        let quoteScreenMsg2 = commonFunction.updateVerificationObject(this.quoteScreenMsg2, "Quote Screen Message2"); 
        expect(quoteScreenMsg2).toContainData(faultReported.quoteScreenMsg2);        
        if(faultReported.contractorList){
           let contractors = faultReported.contractorList.split(",");
           contractors.forEach(contractor =>{
              let contractorActionBtn = element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-fab-button"));
              commonFunction.scrollToElement(contractorActionBtn);
              let qStatus = element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[3]/ion-text[2]"));
              let newRequestStatus = commonFunction.updateVerificationObject(qStatus, "Quote Status"); 
              expect(newRequestStatus).toContainData(faultReported.newQuoteRequestStatus);        
              commonFunction.clickOnElement(contractorActionBtn, "Contractor Action button");
              let contractorViewBtn = element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-fab-list/ion-button"));
              commonFunction.clickOnElement(contractorViewBtn, "Contractor View button");
              commonFunction.scrollToElement(this.faultActionStatus);
              let cqnaceFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after sending quote request"); 
              expect(cqnaceFaultAction).toContainData(faultReported.faultActionCQNACE);
              let cqnaceFaultActionSelected = commonFunction.updateVerificationObject(this.faultActionSelected, "Selected CLI Action"); 
              expect(cqnaceFaultActionSelected).toContainData(faultReported.cliAction);
              commonFunction.scrollToElement(this.responseQuestion);
              let cqnaceFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "CQNACE - Question which requires an action"); 
              expect(cqnaceFaultActionQuestion).toContainData(faultReported.faultActionCQNACEQuestion);          
              commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCQNACE), faultReported.positiveResponseCQNACE);
              let requestAcceptConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Quote Request Accept Confirmation Message"); 
              expect(requestAcceptConfirmationMsg).toContainData(faultReported.confirmMsgCQNACE);
              commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Quote request accept confirmation OK button");
              commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");            
              commonFunction.scrollToElement(contractorActionBtn);
              let acceptedRequestStatus = commonFunction.updateVerificationObject(qStatus, "Quote Status"); 
              expect(acceptedRequestStatus).toContainData(faultReported.acceptedQuoteRequestStatus);
              commonFunction.scrollToElement(this.faultActionStatus);        
              let cdtceFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after accepting quote request"); 
              expect(cdtceFaultAction).toContainData(faultReported.faultActionCDTCE);
              commonFunction.scrollToElement(this.responseQuestion);
              let cdtceFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "CDTCE - Question which requires an action"); 
              expect(cdtceFaultActionQuestion).toContainData(faultReported.faultActionCDTCEQuestion);          
              commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCE), faultReported.positiveResponseCDTCE);
              commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
              commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
              commonFunction.clickOnElement(element(by.xpath("//app-appointment-modal//ion-datetime")), "Date/Time Picker");
              commonFunction.setDate(faultReported.visitDateValue);
              let retroDateMsg = commonFunction.updateVerificationObject(this.pastDateError, "Retrospective date warning"); 
              expect(retroDateMsg).toContainData(faultReported.pastDateError);        
              commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor quote visit popup");
              commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
              commonFunction.scrollToElement(contractorActionBtn);
              let scheduleRequestStatus = commonFunction.updateVerificationObject(qStatus, "Quote Status"); 
              expect(scheduleRequestStatus).toContainData(faultReported.scheduledQuoteRequestStatus);
              commonFunction.scrollToElement(this.faultActionStatus);           
              let cqceFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after scheduling past visit time"); 
              expect(cqceFaultAction).toContainData(faultReported.faultActionCQCE);
              commonFunction.scrollToElement(this.responseQuestion);
              let cqceFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "CQCE - Question which requires an action"); 
              expect(cqceFaultActionQuestion).toContainData(faultReported.faultActionCQCEQuestion);          
              commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', 'Quote &'));
              commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Quote &'), "Upload Quote button");
              commonFunction.sendKeysInto(element(by.xpath("//input[contains(@formcontrolname, 'quote')]")), faultReported.quoteAmount);
              commonFunction.uploadImage(element(by.xpath("//input[@id='docFiles']")), faultReported.quoteDoc, "Quote document");
              commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Submit'), "Quote Upload Submit button");
              commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");           
              commonFunction.scrollToElement(contractorActionBtn);
              let uploadQuoteStatus = commonFunction.updateVerificationObject(qStatus, "Quote Status"); 
              expect(uploadQuoteStatus).toContainData(faultReported.quoteUploadedRequestStatus);            
           });
           commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseQCLE));
           commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseQCLE), faultReported.positiveResponseQCLE);
           commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SKIP PAYMENT'), "SKIP PAYMENT button");
           commonFunction.sendKeysInto(merge.skipReason, faultReported.skipReason); 
           commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SUBMIT'), "Skip Payment Reason submit button");                
        }
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status"); 
        commonFunction.scrollToElement(fSummary.faultStatus);
        let woRaisedFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after Works Order raised"); 
        expect(woRaisedFaultStatus).toContainData(faultReported.faultStatusCWONACE);        
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE), faultReported.positiveResponseCWONACE);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Accept Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO), faultReported.positiveResponseCDTCEWO);
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(element(by.xpath("//app-appointment-modal//ion-datetime")), "Date/Time Picker");
        commonFunction.setDate(faultReported.jobCompleteDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor repair visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', 'Mark the Job Completed'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Mark the Job Completed'), "Mark the Job Completed button");
        commonFunction.clickOnElement(this.dateTimeBtnJobComplete, "Date time picker");
        commonFunction.setDate(faultReported.jobCompleteDateValue);
        commonFunction.sendKeysInto(element(by.xpath("//input[contains(@formcontrolname, 'invoiceAmount')]")), faultReported.quoteAmount);
        commonFunction.scrollToElement(element(by.xpath("//input[@id='docFiles']")));
        commonFunction.uploadImage(element(by.xpath("//input[@id='docFiles']")), faultReported.quoteDoc, "Invoice document");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Submit'),"Invoice Upload Submit button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cfteFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after job is completed"); 
        expect(cfteFaultStatus).toContainData(faultReported.faultStatusCFTE);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCFTE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCFTE), faultReported.positiveResponseCFTE);
        let tenantSatisfyConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Tenant satisfied Confirmation Message"); 
        expect(tenantSatisfyConfirmationMsg).toContainData(faultReported.tenantSatisfyConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Tenant satisfied confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cfteResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after tenant is satisfied"); 
        expect(cfteResponseFaultStatus).toContainData(faultReported.faultStatusAfterCFTE);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button','Yes, Approve this Invoice'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','Yes, Approve this Invoice'),"Approve Invoice button");
        let approveInvoiceConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Approve Invoice Confirmation Message"); 
        expect(approveInvoiceConfirmationMsg).toContainData(faultReported.invoiceApproveConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Approve Invoice confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let approveResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after invoice is approved"); 
        expect(approveResponseFaultStatus).toContainData(faultReported.faultStatusAfterInvoiceApproval);   
    }
 
    this.checkQuoteDetails = function(faultReported){
        let addFault = new fault(faultReported);
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to Obtain Quote confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.contractorBlock, "Contractor list");
        if(Array.isArray(faultReported.prefContractorList) && (faultReported.prefContractorList).length){
           (faultReported.prefContractorList).forEach(contractor =>{
                this.checkContractorDetails(faultReported, contractor);
            });
        }
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        let blankNominalCodeMsg = commonFunction.updateVerificationObject(this.nominalCodeError, "Blank Nominal Code error message"); 
        expect(blankNominalCodeMsg).toContainData(faultReported.quoteFormErrorMsg);
        let blankRequiredByMsg = commonFunction.updateVerificationObject(this.requiredByDateError, "Blank Required By date error message"); 
        expect(blankRequiredByMsg).toContainData(faultReported.quoteFormErrorMsg);
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(merge.requiredByDate);
        commonFunction.clickOnElement(merge.requiredByDate, "Required By Date picker");
        commonFunction.clickOnElement(merge.requiredByDateDoneBtn, "Required By Date Done button");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        let contractorMissingMsg = commonFunction.updateVerificationObject(addFault.toastMessage, "Contractor missing message"); 
        expect(contractorMissingMsg).toContainData(faultReported.missingContractorError); 
        commonFunction.scrollToElement(merge.contractorInput);
        merge.contractorInput.click();
        commonFunction.sendKeysInto(merge.contractorInput, faultReported.contractor);
        commonFunction.waitForElementToBeVisible(merge.contractorSearchValue, "Contractor Search Result");
        commonFunction.clickOnElement(merge.contractorSearchValue, "Contractor Search Result");
        commonFunction.scrollToElement(this.contractorAddBtn);
        commonFunction.clickOnElement(this.contractorAddBtn, "Contractor Add Button"); 
        let contractorErrorMsg = commonFunction.updateVerificationObject(this.contractorAddError, "Contractor add error message"); 
        expect(contractorErrorMsg).toContainData(faultReported.contractorExistError);        
        if(faultReported.contractorList){
            let contractors = faultReported.contractorList.split(",");
            contractors.forEach(function(contractor){
                commonFunction.scrollToElement(element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-checkbox")));
                commonFunction.clickOnElement(element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-checkbox")), contractor + " select button");
            });
        }  
        let contractorLimitMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Contractor limit message"); 
        expect(contractorLimitMsg).toContainData(faultReported.contractorLimitMsg); 
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('span', 'OK'));      
    }

    this.rejectQuoteRequest = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to Obtain Quote confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.contractorBlock, "Contractor list");
        if(faultReported.rejectContractor){
           let contractors = faultReported.rejectContractor.split(",");
           contractors.forEach(function(contractor){
               commonFunction.scrollToElement(element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-checkbox")));
               commonFunction.clickOnElement(element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-checkbox")), contractor + " select button");
           });
        }
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(merge.requiredByDate);
        commonFunction.clickOnElement(merge.requiredByDate, "Required By Date picker");
        commonFunction.clickOnElement(merge.requiredByDateDoneBtn, "Required By Date Done button");
        commonFunction.waitForElementToBeVisible(merge.requiredByDate, "Required By Date");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Obtain Quote confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.contractorBlock, "Contractor list");
        let contractorActionBtn = element(by.xpath("//ion-text[contains(text(), '" + faultReported.rejectContractor + "')]/../following-sibling::ion-col[4]//ion-fab-button"));
        commonFunction.scrollToElement(contractorActionBtn);
        commonFunction.clickOnElement(contractorActionBtn, "Contractor Action button");
        let contractorViewBtn = element(by.xpath("//ion-text[contains(text(), '" + faultReported.rejectContractor + "')]/../following-sibling::ion-col[4]//ion-fab-list/ion-button"));
        commonFunction.clickOnElement(contractorViewBtn, "Contractor View button");
        commonFunction.scrollToElement(this.faultActionStatus);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCQNACE), faultReported.negativeResponseCQNACE);
        commonFunction.clickOnElement(this.contractorRejectionReasonList, "Contractor Rejection Reason List");
        commonFunction.clickOnElement(this.contractorRejectionReason, faultReported.contractorRejectionReason);
        if(faultReported.contractorRejectionReason.includes("Other")){
            commonFunction.sendKeysInto(this.contractorRejectOtherReason, faultReported.contractorRejectionOtherReason);
        }
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Contractor rejection reason YES button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let faultStatusAfterRejection = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after quote request rejected by contractor"); 
        expect(faultStatusAfterRejection).toContainData(faultReported.faultStatusAfterContractorRejection); 
        commonFunction.scrollToElement(this.faultActionStatus);
        let cqnaceResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after contractor response to CQNACE"); 
        expect(cqnaceResponseFaultAction).toContainData(faultReported.faultActionCQNACEResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCQNACE));
        let responseSelectedCQNACE = commonFunction.updateVerificationObjectByAttrib(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCQNACE), "Submitted Response CQNACE", "color");
        expect(responseSelectedCQNACE).toContainData(faultReported.cqnaceSubmittedResponse);
        commonFunction.scrollToElement(this.nextStepTxt);
        let nextStepText = commonFunction.updateVerificationObject(this.nextStepTxt, "Next Step after contractor response to CQNACE"); 
        expect(nextStepText).toContainData(faultReported.nextStepCQNACEResponse); 
        let qStatus = element(by.xpath("//ion-text[contains(text(), '" + faultReported.rejectContractor + "')]/../following-sibling::ion-col[3]/ion-text[2]"));
        commonFunction.scrollToElement(qStatus);
        let rejectedRequestStatus = commonFunction.updateVerificationObject(qStatus, "Quote Status"); 
        expect(rejectedRequestStatus).toContainData(faultReported.rejectedQuoteRequestStatus);              
    }

    this.couldNotCarryOutQuote = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to Obtain Quote confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.contractorBlock, "Contractor list");
        if(faultReported.rejectContractor){
           let contractors = faultReported.rejectContractor.split(",");
           contractors.forEach(function(contractor){
               commonFunction.scrollToElement(element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-checkbox")));
               commonFunction.clickOnElement(element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-checkbox")), contractor + " select button");
           });
        }
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(merge.requiredByDate);
        commonFunction.clickOnElement(merge.requiredByDate, "Required By Date picker");
        commonFunction.clickOnElement(merge.requiredByDateDoneBtn, "Required By Date Done button");
        commonFunction.waitForElementToBeVisible(merge.requiredByDate, "Required By Date");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Obtain Quote confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.contractorBlock, "Contractor list");
        let contractorActionBtn = element(by.xpath("//ion-text[contains(text(), '" + faultReported.rejectContractor + "')]/../following-sibling::ion-col[4]//ion-fab-button"));
        commonFunction.scrollToElement(contractorActionBtn);
        commonFunction.clickOnElement(contractorActionBtn, "Contractor Action button");
        let contractorViewBtn = element(by.xpath("//ion-text[contains(text(), '" + faultReported.rejectContractor + "')]/../following-sibling::ion-col[4]//ion-fab-list/ion-button"));
        commonFunction.clickOnElement(contractorViewBtn, "Contractor View button");
        commonFunction.scrollToElement(this.faultActionStatus);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCQNACE), faultReported.positiveResponseCQNACE);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Quote request accept confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCE), faultReported.positiveResponseCDTCE);
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(element(by.xpath("//app-appointment-modal//ion-datetime")), "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor quote visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCQCE), faultReported.negativeResponseCQCE);
        let couldNotQuoteConfirmMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Could not carry out Quote confirmation message"); 
        expect(couldNotQuoteConfirmMsg).toContainData(faultReported.couldNotCarryQuoteConfirmMsg); 
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Could not carry out Quote confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let faultStatusAfterNoQuote = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after contractor confirmed - couldn't carry quote"); 
        expect(faultStatusAfterNoQuote).toContainData(faultReported.faultStatusAfterNoQuote); 
        commonFunction.scrollToElement(this.faultActionStatus);
        let cqceResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after contractor response to CQCE"); 
        expect(cqceResponseFaultAction).toContainData(faultReported.faultActionCQCEResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCQCE));
        let responseSelectedCQCE = commonFunction.updateVerificationObjectByAttrib(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCQCE), "Submitted Response CQCE", "color");
        expect(responseSelectedCQCE).toContainData(faultReported.cqceSubmittedResponse);
        commonFunction.scrollToElement(this.nextStepTxt);
        let nextStepText = commonFunction.updateVerificationObject(this.nextStepTxt, "Next Step after contractor response to CQCE"); 
        expect(nextStepText).toContainData(faultReported.nextStepCQCEResponse); 
        let qStatus = element(by.xpath("//ion-text[contains(text(), '" + faultReported.rejectContractor + "')]/../following-sibling::ion-col[3]/ion-text[2]"));
        commonFunction.scrollToElement(qStatus);
        let noQuoteStatus = commonFunction.updateVerificationObject(qStatus, "Quote Status"); 
        expect(noQuoteStatus).toContainData(faultReported.noQuoteRequestStatus);              
    }

    this.rejectQuote = function(faultReported){
        let addFault = new fault(faultReported);
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to Obtain Quote confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.contractorBlock, "Contractor list");
        if(faultReported.rejectContractor){
           let contractors = faultReported.rejectContractor.split(",");
           contractors.forEach(function(contractor){
               commonFunction.scrollToElement(element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-checkbox")));
               commonFunction.clickOnElement(element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-checkbox")), contractor + " select button");
           });
        }
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(merge.requiredByDate);
        commonFunction.clickOnElement(merge.requiredByDate, "Required By Date picker");
        commonFunction.clickOnElement(merge.requiredByDateDoneBtn, "Required By Date Done button");
        commonFunction.waitForElementToBeVisible(merge.requiredByDate, "Required By Date");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Obtain Quote confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.contractorBlock, "Contractor list");
        let contractorActionBtn = element(by.xpath("//ion-text[contains(text(), '" + faultReported.rejectContractor + "')]/../following-sibling::ion-col[4]//ion-fab-button"));
        commonFunction.scrollToElement(contractorActionBtn);
        commonFunction.clickOnElement(contractorActionBtn, "Contractor Action button");
        let contractorViewBtn = element(by.xpath("//ion-text[contains(text(), '" + faultReported.rejectContractor + "')]/../following-sibling::ion-col[4]//ion-fab-list/ion-button"));
        commonFunction.clickOnElement(contractorViewBtn, "Contractor View button");
        commonFunction.scrollToElement(this.faultActionStatus);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCQNACE), faultReported.positiveResponseCQNACE);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Quote request accept confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCE), faultReported.positiveResponseCDTCE);
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(element(by.xpath("//app-appointment-modal//ion-datetime")), "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor quote visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");       
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', 'Quote &'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Quote &'), "Upload Quote button");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Submit'), "Quote Upload Submit button");
        commonFunction.waitForElementToBeVisible(addFault.toastMessage, "Flash Messaage");
        let quoteAmountMsg = commonFunction.updateVerificationObject(addFault.toastMessage, "Quote amount missing message"); 
        expect(quoteAmountMsg).toContainData(faultReported.quoteAmountMissingMsg);        
        commonFunction.sendKeysInto(element(by.xpath("//input[contains(@formcontrolname, 'quote')]")), faultReported.quoteAmount);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Submit'), "Quote Upload Submit button");
        commonFunction.waitForElementToBeVisible(addFault.toastMessage, "Flash Messaage");
        let quoteDocMsg = commonFunction.updateVerificationObject(addFault.toastMessage, "Quote document missing message"); 
        expect(quoteDocMsg).toContainData(faultReported.quoteDocMissingMsg);      
        commonFunction.uploadImage(element(by.xpath("//input[@id='docFiles']")), faultReported.quoteDoc, "Quote document");
        commonFunction.clickOnElement(this.quotePhotoTab, "Quote Photo tab");
        commonFunction.uploadImage(element(by.xpath("//input[@id='photoFiles']")), faultReported.quotePhoto, "Quote photo");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Submit'), "Quote Upload Submit button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let quoteUploadFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after quote upload"); 
        expect(quoteUploadFaultStatus).toContainData(faultReported.quoteUploadFaultStatus); 
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseQCLE));     
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseQCLE), faultReported.negativeResponseQCLE);
        commonFunction.clickOnElement(this.landlordRejectionReasonList, "Landlord Rejection Reason List");
        commonFunction.clickOnElement(this.landlordRejectionReason, faultReported.landlordRejectionReason);
        if(faultReported.landlordRejectionReason.includes("Other")){
            commonFunction.sendKeysInto(this.landlordRejectOtherReason, faultReported.landlordRejectionOtherReason);
        }
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Landlord rejection reason YES button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let faultStatusAfterQuoteRejection = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after landlord rejected quote"); 
        expect(faultStatusAfterQuoteRejection).toContainData(faultReported.faultStatusAfterLandlordRejection); 
        commonFunction.scrollToElement(this.faultActionStatus);
        let qcleResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after landlord rejected quote"); 
        expect(qcleResponseFaultAction).toContainData(faultReported.faultActionQCLEResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseQCLE));
        let responseSelectedQCLE = commonFunction.updateVerificationObjectByAttrib(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseQCLE), "Submitted Response QCLE", "color");
        expect(responseSelectedQCLE).toContainData(faultReported.qcleSubmittedResponse);
        commonFunction.scrollToElement(this.nextStepTxt);
        let nextStepText = commonFunction.updateVerificationObject(this.nextStepTxt, "Next Step after landlord rejected quote"); 
        expect(nextStepText).toContainData(faultReported.nextStepQCLEResponse); 
        let qStatus = element(by.xpath("//ion-text[contains(text(), '" + faultReported.rejectContractor + "')]/../following-sibling::ion-col[3]/ion-text[2]"));
        commonFunction.scrollToElement(qStatus);
        let rejectedQuoteStatus = commonFunction.updateVerificationObject(qStatus, "Quote Status"); 
        expect(rejectedQuoteStatus).toContainData(faultReported.rejectedQuoteStatus);              
    }
    
    this.checkContractorDetails = function(faultReported, optList){
        let fSummary = new faultSummary(faultReported);
        let options = optList.split(",");
        commonFunction.checkVisibleData('ion-text', optList, true, "The data is visible");
        let searchableOption = options[0];
        let indices = [...options[0].matchAll(new RegExp('\'', 'g'))].map(result => result.index);
        if(indices.length){
            indices.splice(0,0,-1);
            indices.splice(indices.length,0,indices.length+1);
            let diff = 0;
            for(let i=0; i<indices.length-1; i++){
               if(indices[i+1]-indices[i] > diff){
                  diff = indices[i+1]-indices[i];
                  searchableOption = options[0].substring(indices[i]+1, (indices[i+1]-1));
               }
            }
        }
        commonFunction.scrollToElement(element(by.xpath("//ion-text[contains(text(), '" + searchableOption + "')]/preceding-sibling::span")));
        commonFunction.mouseHover(element(by.xpath("//ion-text[contains(text(), '" + searchableOption + "')]/preceding-sibling::span")));
        let prefContractor = commonFunction.updateVerificationObject(fSummary.tooltip, "Preferred contractor tooltip"); 
        expect(prefContractor).toContainData(faultReported.prefContractorTooltip);
        if(options[2].includes("...")){
            commonFunction.scrollToElement(element(by.xpath("//ion-text[contains(text(), '" + searchableOption + "')]/../following-sibling::ion-col[2]/ion-text[2]")));
            commonFunction.clickOnElement(element(by.xpath("//ion-text[contains(text(), '" + searchableOption + "')]/../following-sibling::ion-col[2]/ion-text[2]")), "Contractor skills");
            let skills = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Contractor Skills"); 
            expect(skills).toContainData(faultReported.contractorSkills); 
            commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('span', 'OK'), "Contractor Skills popup OK button");
        }               
    }

    this.editQuoteVisitTime = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to Obtain Quote confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.contractorBlock, "Contractor list");
        if(faultReported.contractorList){
           let contractors = faultReported.contractorList.split(",");
           contractors.forEach(function(contractor){
               commonFunction.scrollToElement(element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-checkbox")));
               commonFunction.clickOnElement(element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-checkbox")), contractor + " select button");
           });
        }
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(merge.requiredByDate);
        commonFunction.clickOnElement(merge.requiredByDate, "Required By Date picker");
        commonFunction.clickOnElement(merge.requiredByDateDoneBtn, "Required By Date Done button");
        commonFunction.waitForElementToBeVisible(merge.requiredByDate, "Required By Date");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Obtain Quote confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.contractorBlock, "Contractor list");
        let contractorActionBtn = element(by.xpath("//ion-text[contains(text(), '" + faultReported.contractor1 + "')]/../following-sibling::ion-col[4]//ion-fab-button"));
        commonFunction.scrollToElement(contractorActionBtn);
        commonFunction.clickOnElement(contractorActionBtn, "Contractor Action button");
        let contractorViewBtn = element(by.xpath("//ion-text[contains(text(), '" + faultReported.contractor1 + "')]/../following-sibling::ion-col[4]//ion-fab-list/ion-button"));
        commonFunction.clickOnElement(contractorViewBtn, "Contractor View button");
        commonFunction.scrollToElement(this.faultActionStatus);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCQNACE), faultReported.positiveResponseCQNACE);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Quote request accept confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCE), faultReported.positiveResponseCDTCE);
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.mouseHover(commonFunction.getElementByCssContainingText('ion-label', 'In the morning'));
        let morningTimeSlot = commonFunction.updateVerificationObject(fSummary.tooltip, "In the morning time slot"); 
        expect(morningTimeSlot).toContainData(faultReported.morningSeesionTooltip);
        commonFunction.mouseHover(commonFunction.getElementByCssContainingText('ion-label', 'In the afternoon'));
        let afternoonTimeSlot = commonFunction.updateVerificationObject(fSummary.tooltip, "In the afternoon time slot"); 
        expect(afternoonTimeSlot).toContainData(faultReported.afternoonSeesionTooltip);
        commonFunction.mouseHover(commonFunction.getElementByCssContainingText('ion-label', 'In the evening'));
        let eveningTimeSlot = commonFunction.updateVerificationObject(fSummary.tooltip, "In the evening time slot"); 
        expect(eveningTimeSlot).toContainData(faultReported.eveningSeesionTooltip);
        commonFunction.clickOnElement(this.dateSessionBtn, faultReported.dateSession);       
        commonFunction.scrollToElement(this.dateTimeBtn);
        commonFunction.clickOnElement(this.dateTimeBtn, "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        commonFunction.scrollToElement(this.pastDateError);
        let retroDateMsg = commonFunction.updateVerificationObject(this.pastDateError, "Retrospective date warning"); 
        expect(retroDateMsg).toContainData(faultReported.pastDateError);       
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor quote visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");    
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', 'Modify Date/Time'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Modify Date/Time'), "Modify Date/Time button");
        commonFunction.scrollToElement(this.dateEditSessionBtn);
        commonFunction.clickOnElement(this.dateEditSessionBtn, faultReported.editDateSession);
      //  commonFunction.scrollToElement(this.dateTimeBtn);
      //  commonFunction.clickOnElement(this.dateTimeBtn, "Date/Time Picker");
      //  commonFunction.setDate(faultReported.editVisitDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor quote visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status"); 
        commonFunction.scrollToElement(this.nextStepTxt);
        let editDateNextStepText = commonFunction.updateVerificationObject(this.nextStepTxt, "Next Step after visit time edit"); 
        expect(editDateNextStepText).toContainData(faultReported.editDateSession);       
        let contractor2ActionBtn = element(by.xpath("//ion-text[contains(text(), '" + faultReported.contractor2 + "')]/../following-sibling::ion-col[4]//ion-fab-button"));
        commonFunction.scrollToElement(contractor2ActionBtn);
        commonFunction.clickOnElement(contractor2ActionBtn, "Contractor Action button");
        let contractor2ViewBtn = element(by.xpath("//ion-text[contains(text(), '" + faultReported.contractor2 + "')]/../following-sibling::ion-col[4]//ion-fab-list/ion-button"));
        commonFunction.clickOnElement(contractor2ViewBtn, "Contractor View button");
        commonFunction.scrollToElement(this.faultActionStatus);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCQNACE), faultReported.positiveResponseCQNACE);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Quote request accept confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCDTCE), faultReported.negativeResponseCDTCE);
        let tenantNotContactableConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Tenant not contactable confirmation Message"); 
        expect(tenantNotContactableConfirmationMsg).toContainData(faultReported.tenantNotContactableConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Tenant not contactable confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(this.faultActionStatus);
        let cdtceResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after contractor response to CDTCE"); 
        expect(cdtceResponseFaultAction).toContainData(faultReported.faultActionCDTCEResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCDTCE));
        let responseSelectedCDTCE = commonFunction.updateVerificationObjectByAttrib(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseCDTCE), "Submitted Response CDTCE", "color");
        expect(responseSelectedCDTCE).toContainData(faultReported.cdtceSubmittedResponse);
        let qStatus = element(by.xpath("//ion-text[contains(text(), '" + faultReported.contractor2 + "')]/../following-sibling::ion-col[3]/ion-text[2]"));
        commonFunction.scrollToElement(qStatus);
        let notContactableStatus = commonFunction.updateVerificationObject(qStatus, "Quote Status"); 
        expect(notContactableStatus).toContainData(faultReported.notContactableQuoteRequestStatus);  
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', 'Add Date/Time'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Add Date/Time'), "Add Date/Time button");
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(this.dateSessionBtn, faultReported.dateSession);       
        commonFunction.scrollToElement(this.dateTimeBtn);
        commonFunction.clickOnElement(this.dateTimeBtn, "Date/Time Picker");
        commonFunction.setDate(faultReported.addVisitDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor quote visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");    
        commonFunction.scrollToElement(fSummary.faultStatus);
        let faultStatusAfterAddVisitDate = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after visit date time is added"); 
        expect(faultStatusAfterAddVisitDate).toContainData(faultReported.faultStatusAfterAddVisitDateTime); 
        let addDateQuoteStatus = element(by.xpath("//ion-text[contains(text(), '" + faultReported.contractor2 + "')]/../following-sibling::ion-col[3]/ion-text[2]"));
        commonFunction.scrollToElement(addDateQuoteStatus);
        let addDateTimeQuoteStatus = commonFunction.updateVerificationObject(addDateQuoteStatus, "Quote Status"); 
        expect(addDateTimeQuoteStatus).toContainData(faultReported.quoteRequestStatusAfterAddDateTime);         
    }
     
    this.changeRepairToWorksOrder = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to Obtain Quote confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.contractorBlock, "Contractor list");
        if(faultReported.contractorList){
           let contractors = faultReported.contractorList.split(",");
           contractors.forEach(function(contractor){
               commonFunction.scrollToElement(element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-checkbox")));
               commonFunction.clickOnElement(element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-checkbox")), contractor + " select button");
           });
        }
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(merge.requiredByDate);
        commonFunction.clickOnElement(merge.requiredByDate, "Required By Date picker");
        commonFunction.clickOnElement(merge.requiredByDateDoneBtn, "Required By Date Done button");
        commonFunction.waitForElementToBeVisible(merge.requiredByDate, "Required By Date");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Obtain Quote confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.contractorBlock, "Contractor list");
        let contractorActionBtn = element(by.xpath("//ion-text[contains(text(), '" + faultReported.contractor1 + "')]/../following-sibling::ion-col[4]//ion-fab-button"));
        commonFunction.scrollToElement(contractorActionBtn);
        commonFunction.clickOnElement(contractorActionBtn, "Contractor Action button");
        let contractorViewBtn = element(by.xpath("//ion-text[contains(text(), '" + faultReported.contractor1 + "')]/../following-sibling::ion-col[4]//ion-fab-list/ion-button"));
        commonFunction.clickOnElement(contractorViewBtn, "Contractor View button");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('h6','Want to proceed in a different way?'));
        commonFunction.checkVisibleData('ion-button', faultReported.differentWayOptions, true, "Different way repair option is");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',faultReported.differentRepair), faultReported.differentRepair);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        let repairConfirmationMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Different Repair Confirmation Message1"); 
        expect(repairConfirmationMsg1).toContainData(faultReported.diffRepairConfirmationMsg1);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Different repair confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(this.contractorInputWO);
        this.contractorInputWO.click();
        commonFunction.sendKeysInto(this.contractorInputWO, faultReported.contractorWO);
        commonFunction.waitForElementToBeVisible(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.clickOnElement(this.contractorSearchValue, "Contractor Search Result");
        commonFunction.waitForElementToBeVisible(this.repairCost);
        commonFunction.scrollToElement(this.repairCost);
        commonFunction.sendKeysInto(this.repairCost, faultReported.repairAmount);
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SKIP PAYMENT'), "SKIP PAYMENT button");
        commonFunction.sendKeysInto(merge.skipReason, faultReported.skipReason); 
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SUBMIT'), "Skip Payment Reason submit button");                
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status"); 
        commonFunction.scrollToElement(fSummary.faultStatus);
        let woRaisedFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after Works Order raised"); 
        expect(woRaisedFaultStatus).toContainData(faultReported.faultStatusCWONACE); 
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE), faultReported.positiveResponseCWONACE);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Accept Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO), faultReported.positiveResponseCDTCEWO);
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(element(by.xpath("//app-appointment-modal//ion-datetime")), "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor repair visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', 'Mark the Job Completed'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Mark the Job Completed'), "Mark the Job Completed button");
        commonFunction.clickOnElement(this.dateTimeBtnJobComplete, "Date time picker");
        commonFunction.setDate(faultReported.jobCompleteDateValue);
        commonFunction.sendKeysInto(element(by.xpath("//input[contains(@formcontrolname, 'invoiceAmount')]")), faultReported.repairAmount);
        commonFunction.scrollToElement(element(by.xpath("//input[@id='docFiles']")));
        commonFunction.uploadImage(element(by.xpath("//input[@id='docFiles']")), faultReported.invoiceDoc, "Invoice document");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Submit'),"Invoice Upload Submit button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cfteFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after job is completed"); 
        expect(cfteFaultStatus).toContainData(faultReported.faultStatusCFTE);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCFTE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCFTE), faultReported.positiveResponseCFTE);
        let tenantSatisfyConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Tenant satisfied Confirmation Message"); 
        expect(tenantSatisfyConfirmationMsg).toContainData(faultReported.tenantSatisfyConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Tenant satisfied confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cfteResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after tenant is satisfied"); 
        expect(cfteResponseFaultStatus).toContainData(faultReported.faultStatusAfterCFTE);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button','Yes, Approve this Invoice'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','Yes, Approve this Invoice'),"Approve Invoice button");
        let approveInvoiceConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Approve Invoice Confirmation Message"); 
        expect(approveInvoiceConfirmationMsg).toContainData(faultReported.invoiceApproveConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Approve Invoice confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let approveResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after invoice is approved"); 
        expect(approveResponseFaultStatus).toContainData(faultReported.faultStatusAfterInvoiceApproval);
    }
}
module.exports = ObtainQuote;
