var commonUtil = require('../../util/common.util.page');
var commonFunction = new commonUtil();
var fault = require('../igf-logfault/add.fault.page');
var faultSummary = require('../igf-logfault/fault.summary.page');
var mergeFault = require('../igf-logfault/merge.fault.page');

var LandlordOwnRepair = function (faultDetails) {
    
    /**
     * Locators for elements used in 'Lanldord Own Repair' functionality
     */ 
   
    this.proceedBtn = element(by.xpath("//ion-button[contains(text(),  'Proceed') and contains(@class, 'submit-button')]"));
    this.faultActionStatus = element(by.css("div.banner > h2.banner-heading")); 
    this.faultActionSelected = element(by.xpath("//h6[contains(text(), 'the action you chose')]/following-sibling::ion-button"));
    this.responseQuestion = element(by.css("div.question-answer > h6.ng-star-inserted"));
    this.ccCompnay = element(by.xpath("//ion-input[contains(@formcontrolname, 'company')]/input"));
    this.ccName = element(by.xpath("//ion-input[contains(@formcontrolname, 'name')]/input"));
    this.ccTelephone = element(by.xpath("//ion-input[contains(@formcontrolname, 'telephone')]/input"));
    this.ccEmail = element(by.xpath("//ion-input[contains(@formcontrolname, 'email')]/input"));
    this.dateTimeTypeList = element(by.xpath("//ion-select[contains(@formcontrolname, 'dateTimeType')]"));
    this.dateTimeType = element(by.xpath("//ion-label[contains(text(), '" + faultDetails.dateTimeType + "')]/following-sibling::ion-radio"));
    this.dateTimeBtn = element(by.css("ion-datetime.request-start-date"));
    this.dateTimeDoneBtn = element(by.xpath("//button[contains(text(), 'Done')]"));
    this.dateSessionBtn = element(by.xpath("//ion-label[contains(text(), '" + faultDetails.dateSession + "')]/following-sibling::ion-radio"));
    this.ccDetailsNotes = element(by.xpath("//app-contractor-details-modal//ion-textarea[contains(@formcontrolname, 'notes')]/div/textarea"));
    this.ccConsentCheckbox = element(by.xpath("//ion-checkbox[contains(@formcontrolname, 'hasContractorConsent')]"));
    this.ccCompanyError = element(by.xpath("//ion-input[contains(@formcontrolname, 'company')]/../following-sibling::app-validation-message/div"));
    this.ccNameError = element(by.xpath("//ion-input[contains(@formcontrolname, 'name')]/../following-sibling::app-validation-message/div"));
    this.ccTelephoneError = element(by.xpath("//ion-input[contains(@formcontrolname, 'telephone')]/../following-sibling::app-validation-message/div"));
    this.ccEmailError = element(by.xpath("//ion-input[contains(@formcontrolname, 'email')]/../following-sibling::app-validation-message/div"));
    this.ccConsentError = element(by.xpath("//ion-checkbox[contains(@formcontrolname, 'hasContractorConsent')]/../following-sibling::app-validation-message/div"));
    this.pastDateError = element(by.xpath("//ion-label[contains(text(), 'Visit Date')]/../following-sibling::ion-text"));
    this.markJobCompletePopupTitle = element(by.css("ion-title.title-default"));
    this.markJobCompletePopupTxt = element(by.css("app-job-completion-modal > ion-content > form > ion-grid > ion-row > ion-col > h6"));
    this.actionAfterLFTE = element(by.xpath("//app-close-fault//h3"));
    this.displayedReason = element(by.xpath("//app-close-fault//h5"));
    this.nextStepTxt = element(by.xpath("//ion-text[contains(text(), 'Please note')]/.."));
    this.contractorBlock = element(by.css("div.contractor-block"));
    this.faultTitle = element(by.xpath("(//h2[contains(text(), '" + faultDetails.title + "')])[2]")); 
    
    this.completeLLOwnRepair = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cliFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after reaching to CLI stage"); 
        expect(cliFaultStatus).toContainData(faultReported.cliUpdatedStatus); 
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        let llRepairConfirmationMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "LL Own Repair Confirmation Message1"); 
        expect(llRepairConfirmationMsg1).toContainData(faultReported.cliOwnRepairConfirmMsg1);
        let llRepairConfirmationMsg2 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "LL Own Repair Confirmation Message2"); 
        expect(llRepairConfirmationMsg2).toContainData(faultReported.cliOwnRepairConfirmMsg2);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to LL Own Repair confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lrleFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after selecting CLI action LL Own Repair"); 
        expect(lrleFaultStatus).toContainData(faultReported.faultStatusLRLE);
        commonFunction.scrollToElement(this.faultActionStatus);
        let lrleFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after selecting CLI action LL Own Repair"); 
        expect(lrleFaultAction).toContainData(faultReported.faultActionLRLE);
        let lrleFaultActionSelected = commonFunction.updateVerificationObject(this.faultActionSelected, "Selected CLI Action"); 
        expect(lrleFaultActionSelected).toContainData(faultReported.cliActionSelected);
        commonFunction.scrollToElement(this.responseQuestion);
        let lrleFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "Question which requires an action"); 
        expect(lrleFaultActionQuestion).toContainData(faultReported.faultActionLRLEQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE), faultReported.positiveResponseLRLE);
        let repairConfirmationMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Repair Confirmation Message1"); 
        expect(repairConfirmationMsg1).toContainData(faultReported.llOwnRepairConfirmMsg1);
        let repairConfirmationMsg2 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Repair Confirmation Message2"); 
        expect(repairConfirmationMsg2).toContainData(faultReported.llOwnRepairConfirmMsg2);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Work In Progress confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lrleResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after landlord response to LRLE"); 
        expect(lrleResponseFaultStatus).toContainData(faultReported.faultStatusAfterLRLE);
        commonFunction.scrollToElement(this.faultActionStatus);
        let lrleResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after landlord response to LRLE"); 
        expect(lrleResponseFaultAction).toContainData(faultReported.faultActionLRLEResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE));
        let responseSelectedLRLE = commonFunction.updateVerificationObjectByAttrib(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE), "Submitted Response LRLE", "color");
        expect(responseSelectedLRLE).toContainData(faultReported.lrleSubmittedResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', "Add Contractor Details"));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "Add Contractor Details"),  "Add Contractor Details button");
        commonFunction.waitForElementToBeVisible(this.ccCompnay, "Add Contractor Details popup");
        commonFunction.sendKeysInto(this.ccCompnay, faultReported.ccCompany);
        commonFunction.sendKeysInto(this.ccName, faultReported.ccName);
        let rNo1 = Math.floor((Math.random() * 100000) + 1);
        let rNo2 = Math.floor((Math.random() * 10000) + 1);
        let telephone = parseInt(faultReported.ccTelephone, 10);
        commonFunction.sendKeysInto(this.ccTelephone, (telephone + rNo1 + rNo2).toString());
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(this.dateTimeBtn, "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        let retroDateMsg = commonFunction.updateVerificationObject(this.pastDateError, "Retrospective date warning"); 
        expect(retroDateMsg).toContainData(faultReported.pastDateError);
        commonFunction.scrollToElement(this.ccConsentCheckbox);
        commonFunction.clickOnElement(this.ccConsentCheckbox, "Contractor consent checkbox");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "SAVE"),  "SAVE button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lcleFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after visit time scheduled"); 
        expect(lcleFaultStatus).toContainData(faultReported.faultStatusLCLE);
        commonFunction.scrollToElement(this.faultActionStatus);
        let lcleFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after visit time scheduled LCLE"); 
        expect(lcleFaultAction).toContainData(faultReported.faultActionLCLE);
        commonFunction.scrollToElement(this.responseQuestion);
        let lcleFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "Question which requires an action LCLE"); 
        expect(lcleFaultActionQuestion).toContainData(faultReported.faultActionLCLEQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLCLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLCLE), faultReported.positiveResponseLCLE);
        commonFunction.waitForElementToBeVisible(this.markJobCompletePopupTxt, "Mark Job Complete popup");
        let jobCompletePopupTitle = commonFunction.updateVerificationObject(this.markJobCompletePopupTitle, "Mark Job Complete popup title"); 
        expect(jobCompletePopupTitle).toContainData(faultReported.markJobCompleteTitle);
        let jobCompletePopupText = commonFunction.updateVerificationObject(this.markJobCompletePopupTxt, "Mark Job Complete popup text"); 
        expect(jobCompletePopupText).toContainData(faultReported.markJobCompleteTxt);
        commonFunction.clickOnElement(this.dateTimeBtn, "Date time picker");
        commonFunction.setDate(faultReported.jobCompleteDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','YES'), "Mark Job Complete popup Yes button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lfteFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after job is completed"); 
        expect(lfteFaultStatus).toContainData(faultReported.faultStatusLFTE);
        commonFunction.scrollToElement(this.faultActionStatus);
        let lfteFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after job is completed LFTE"); 
        expect(lfteFaultAction).toContainData(faultReported.faultActionLFTE);
        commonFunction.scrollToElement(this.responseQuestion);
        let lfteFaultActionQuestion = commonFunction.updateVerificationObject(this.responseQuestion, "Question which requires an action LFTE"); 
        expect(lfteFaultActionQuestion).toContainData(faultReported.faultActionLFTEQuestion);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLFTE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLFTE), faultReported.positiveResponseLFTE);
        let tenantSatisfyConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Tenant satisfied and fault closure Confirmation Message"); 
        expect(tenantSatisfyConfirmationMsg).toContainData(faultReported.tenantSatisfyConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Tenant satisfied and fault closure confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(this.faultActionStatus);
        let lfteResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after tenant is satisfied"); 
        expect(lfteResponseFaultAction).toContainData(faultReported.faultActionAfterLFTE);
        let lfteResponseNextAction = commonFunction.updateVerificationObject(this.actionAfterLFTE, "Next Action after tenant is satisfied"); 
        expect(lfteResponseNextAction).toContainData(faultReported.faultNextActionAfterLFTE);
        commonFunction.scrollToElement(this.displayedReason);
        let closeReasonDisplayed = commonFunction.updateVerificationObject(this.displayedReason, "Fault closure reason"); 
        expect(closeReasonDisplayed).toContainData(faultReported.faultCloseReason);  
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lfteResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after tenant is satisfied"); 
        expect(lfteResponseFaultStatus).toContainData(faultReported.faultStatusAfterLFTE);             
    }
 
    this.editContractorDetails = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to LL Own Repair confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE), faultReported.positiveResponseLRLE);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Work In Progress confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', "Add Contractor Details"));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "Add Contractor Details"),  "Add Contractor Details button");
        commonFunction.waitForElementToBeVisible(this.ccCompnay, "Add Contractor Details popup");
        commonFunction.sendKeysInto(this.ccEmail, faultReported.ccInvalidEmail);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "SAVE"),  "SAVE button");
        let blankCompanyMsg = commonFunction.updateVerificationObject(this.ccCompanyError, "Blank Company error message"); 
        expect(blankCompanyMsg).toContainData(faultReported.contractorDetailsErrorMsg);
        let blankNameMsg = commonFunction.updateVerificationObject(this.ccNameError, "Blank Name error message"); 
        expect(blankNameMsg).toContainData(faultReported.contractorDetailsErrorMsg);
        let blankTelephoneMsg = commonFunction.updateVerificationObject(this.ccTelephoneError, "Blank Telephone error message"); 
        expect(blankTelephoneMsg).toContainData(faultReported.contractorDetailsErrorMsg);
        let invalidEmailMsg = commonFunction.updateVerificationObject(this.ccEmailError, "Invalid Email error message"); 
        expect(invalidEmailMsg).toContainData(faultReported.invalidEmailErrorMsg);        
        commonFunction.scrollToElement(this.ccConsentError);
        let consentMissingMsg = commonFunction.updateVerificationObject(this.ccConsentError, "Missing Consent error message"); 
        expect(consentMissingMsg).toContainData(faultReported.contractorDetailsErrorMsg);        
        commonFunction.clickOnElement(this.ccConsentCheckbox, "Contractor consent checkbox");
        commonFunction.sendKeysInto(this.ccCompnay, faultReported.ccCompany);
        commonFunction.sendKeysInto(this.ccName, faultReported.ccName);
        let rNo1 = Math.floor((Math.random() * 100000) + 1);
        let rNo2 = Math.floor((Math.random() * 10000) + 1);
        let telephone = parseInt(faultReported.ccTelephone, 10);
        commonFunction.sendKeysInto(this.ccTelephone, (telephone + rNo1 + rNo2).toString());
        commonFunction.sendKeysInto(this.ccEmail, faultReported.ccEmail);
        commonFunction.sendKeysInto(this.ccDetailsNotes, faultReported.ccNotes);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "SAVE"),  "SAVE button");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button',  "View/Edit Contractor details"));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "View/Edit Contractor details"),  "View/Edit Contractor details button");
        let companyDetails = commonFunction.updateVerificationObjectByAttrib(this.ccCompnay, "Contractor Company", "value");
        expect(companyDetails).toContainData(faultReported.ccCompany);
        let nameDetails = commonFunction.updateVerificationObjectByAttrib(this.ccName, "Contractor Name", "value");
        expect(nameDetails).toContainData(faultReported.ccName);
        let telephoneDetails = commonFunction.updateVerificationObjectByAttrib(this.ccTelephone, "Contractor Telephone", "value");
        expect(telephoneDetails).toContainData((telephone + rNo1 + rNo2).toString());
        let emailDetails = commonFunction.updateVerificationObjectByAttrib(this.ccEmail, "Contractor Email", "value");
        expect(emailDetails).toContainData(faultReported.ccEmail);
        commonFunction.scrollToElement(this.ccDetailsNotes);
        let notesDetails = commonFunction.updateVerificationObjectByAttrib(this.ccDetailsNotes, "Contractor Notes", "value");
        expect(notesDetails).toContainData(faultReported.ccNotes);       
        commonFunction.scrollToElement(this.ccCompnay);
        commonFunction.sendKeysInto(this.ccCompnay, faultReported.ccCompanyEdit);
        commonFunction.sendKeysInto(this.ccName, faultReported.ccNameEdit);
        let rNo3 = Math.floor((Math.random() * 100000) + 1);
        let rNo4 = Math.floor((Math.random() * 10000) + 1);
        let telephone1 = parseInt(faultReported.ccTelephone, 10);
        commonFunction.sendKeysInto(this.ccTelephone, (telephone1 + rNo3 + rNo4).toString());
        commonFunction.sendKeysInto(this.ccEmail, faultReported.ccEmailEdit);
        commonFunction.scrollToElement(this.ccDetailsNotes);
        commonFunction.sendKeysInto(this.ccDetailsNotes, faultReported.ccNotesEdit);
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.mouseHover(commonFunction.getElementByCssContainingText('ion-label', 'In the morning'));
        let morningTimeSlot = commonFunction.updateVerificationObject(fSummary.tooltip, "In the morning time slot"); 
        expect(morningTimeSlot).toContainData(faultReported.morningSeesionTooltip);
        commonFunction.mouseHover(commonFunction.getElementByCssContainingText('ion-label', 'In the afternoon'));
        let afternoonTimeSlot = commonFunction.updateVerificationObject(fSummary.tooltip, "In the afternoon time slot"); 
        expect(afternoonTimeSlot).toContainData(faultReported.afternoonSeesionTooltip);
        commonFunction.mouseHover(commonFunction.getElementByCssContainingText('ion-label', 'In the evening'));
        let eveningTimeSlot = commonFunction.updateVerificationObject(fSummary.tooltip, "In the evening time slot"); 
        expect(eveningTimeSlot).toContainData(faultReported.eveningSeesionTooltip);
        commonFunction.clickOnElement(this.dateSessionBtn, faultReported.dateSession);       
        commonFunction.scrollToElement(this.dateTimeBtn);
        commonFunction.clickOnElement(this.dateTimeBtn, "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "SAVE"),  "SAVE button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");    
    }

    this.doesNotProceedWithOwnRepair = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to LL Own Repair confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseLRLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseLRLE), faultReported.negativeResponseLRLE);
        let repairConfirmationMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Other Contractor Repair Confirmation Message1"); 
        expect(repairConfirmationMsg1).toContainData(faultReported.noOwnRepairConfirmMsg1);
        let repairConfirmationMsg2 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Other Contractor Repair Confirmation Message2"); 
        expect(repairConfirmationMsg2).toContainData(faultReported.llOwnRepairConfirmMsg2);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Other contractor repair confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lrleResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after landlord response to LRLE"); 
        expect(lrleResponseFaultStatus).toContainData(faultReported.faultStatusAfterNegativeResponseLRLE);
        commonFunction.scrollToElement(this.faultActionStatus);
        let lrleResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after landlord response to LRLE"); 
        expect(lrleResponseFaultAction).toContainData(faultReported.faultActionLRLEResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseLRLE));
        let responseSelectedLRLE = commonFunction.updateVerificationObjectByAttrib(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseLRLE), "Submitted Response LRLE", "color");
        expect(responseSelectedLRLE).toContainData(faultReported.lrleSubmittedResponse);
        commonFunction.scrollToElement(this.nextStepTxt);
        let nextStepText = commonFunction.updateVerificationObject(this.nextStepTxt, "Next Step after landlord response to LRLE"); 
        expect(nextStepText).toContainData(faultReported.nextStepLRLEResponse);      
    }

    this.arrangeContractor = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to LL Own Repair confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE), faultReported.positiveResponseLRLE);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Work In Progress confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', "Add Contractor Details"));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "Add Contractor Details"),  "Add Contractor Details button");
        commonFunction.waitForElementToBeVisible(this.ccCompnay, "Add Contractor Details popup");
        commonFunction.sendKeysInto(this.ccCompnay, faultReported.ccCompany);
        commonFunction.sendKeysInto(this.ccName, faultReported.ccName);
        let rNo1 = Math.floor((Math.random() * 100000) + 1);
        let rNo2 = Math.floor((Math.random() * 10000) + 1);
        let telephone = parseInt(faultReported.ccTelephone, 10);
        commonFunction.sendKeysInto(this.ccTelephone, (telephone + rNo1 + rNo2).toString());
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(this.dateTimeBtn, "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        commonFunction.scrollToElement(this.ccConsentCheckbox);
        commonFunction.clickOnElement(this.ccConsentCheckbox, "Contractor consent checkbox");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "SAVE"),  "SAVE button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseLCLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseLCLE), faultReported.negativeResponseLCLE);
        let repairConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Arrange Other Contractor Confirmation Message"); 
        expect(repairConfirmationMsg).toContainData(faultReported.arrangeOtherContractorConfirmMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Arrange Other contractor confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lcleResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after landlord response to LCLE"); 
        expect(lcleResponseFaultStatus).toContainData(faultReported.faultStatusAfterNegativeResponseLCLE);
        commonFunction.scrollToElement(this.faultActionStatus);
        let lcleResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after landlord response to LCLE"); 
        expect(lcleResponseFaultAction).toContainData(faultReported.faultActionLRLEResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseLCLE));
        let responseSelectedLCLE = commonFunction.updateVerificationObjectByAttrib(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseLCLE), "Submitted Response LCLE", "color");
        expect(responseSelectedLCLE).toContainData(faultReported.lrleSubmittedResponse);
        commonFunction.scrollToElement(this.nextStepTxt);
        let nextStepText = commonFunction.updateVerificationObject(this.nextStepTxt, "Next Step after landlord response to LCLE"); 
        expect(nextStepText).toContainData(faultReported.nextStepLRLEResponse);      
    }

    this.resendTenantSatisfyNotification = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let addFault = new fault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to LL Own Repair confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLRLE), faultReported.positiveResponseLRLE);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Work In Progress confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', "Add Contractor Details"));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "Add Contractor Details"),  "Add Contractor Details button");
        commonFunction.waitForElementToBeVisible(this.ccCompnay, "Add Contractor Details popup");
        commonFunction.sendKeysInto(this.ccCompnay, faultReported.ccCompany);
        commonFunction.sendKeysInto(this.ccName, faultReported.ccName);
        let rNo1 = Math.floor((Math.random() * 100000) + 1);
        let rNo2 = Math.floor((Math.random() * 10000) + 1);
        let telephone = parseInt(faultReported.ccTelephone, 10);
        commonFunction.sendKeysInto(this.ccTelephone, (telephone + rNo1 + rNo2).toString());
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(this.dateTimeBtn, "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        commonFunction.scrollToElement(this.ccConsentCheckbox);
        commonFunction.clickOnElement(this.ccConsentCheckbox, "Contractor consent checkbox");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',  "SAVE"),  "SAVE button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLCLE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseLCLE), faultReported.positiveResponseLCLE);
        commonFunction.waitForElementToBeVisible(this.markJobCompletePopupTxt, "Mark Job Complete popup");
        commonFunction.clickOnElement(this.dateTimeBtn, "Date time picker");
        commonFunction.setDate(faultReported.jobCompleteDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','YES'), "Mark Job Complete popup Yes button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseLFTE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseLFTE), faultReported.negativeResponseLFTE);
        let tenantNotSatisfiedConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Tenant not satisfied Confirmation Message"); 
        expect(tenantNotSatisfiedConfirmationMsg).toContainData(faultReported.tenantNotSatisfyConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Tenant not satisfied confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(this.faultActionStatus);
        let lfteResponseFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after tenant response to LFTE"); 
        expect(lfteResponseFaultAction).toContainData(faultReported.faultActionLRLEResponse);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseLFTE));
        let responseSelectedLFTE = commonFunction.updateVerificationObjectByAttrib(commonFunction.getElementByCssContainingText('ion-button', faultReported.negativeResponseLFTE), "Submitted Response LFTE", "color");
        expect(responseSelectedLFTE).toContainData(faultReported.lrleSubmittedResponse);
        commonFunction.scrollToElement(this.nextStepTxt);
        let nextStepText = commonFunction.updateVerificationObject(this.nextStepTxt, "Next Step after tenant response to LFTE"); 
        expect(nextStepText).toContainData(faultReported.nextStepLRLEResponse);
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lfteResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after tenant response to LFTE"); 
        expect(lfteResponseFaultStatus).toContainData(faultReported.faultStatusAfterNegativeResponseLCLE);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.resendLFTENotification));  
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.resendLFTENotification), faultReported.resendLFTENotification);  
        commonFunction.waitForElementToBeVisible(addFault.toastMessage, "Flash Messaage");
        let toastMsg = commonFunction.updateVerificationObject(addFault.toastMessage, "Notification sent message"); 
        expect(toastMsg).toContainData(faultReported.notificationMessage);   
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let lfteFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after LFTE notification is resent"); 
        expect(lfteFaultStatus).toContainData(faultReported.faultStatusLFTE);
        commonFunction.scrollToElement(this.faultActionStatus);
        let lfteFaultAction = commonFunction.updateVerificationObject(this.faultActionStatus, "Fault Action after LFTE notification is resent"); 
        expect(lfteFaultAction).toContainData(faultReported.faultActionLFTE);        
    }  
    
    this.changeRepairToObtainQuote = function(faultReported){
        let fSummary = new faultSummary(faultReported);
        let merge = new mergeFault(faultReported);
        commonFunction.waitForElementToBeVisible(this.faultTitle, "Fault title");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to CLI confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.cliAction), faultReported.cliAction);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Proceed to LL Own Repair confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('h6','Want to proceed in a different way?'));
        commonFunction.checkVisibleData('ion-button', faultReported.differentWayOptions, true, "Different way repair option is");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button',faultReported.differentRepair));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button',faultReported.differentRepair), faultReported.differentRepair);
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        let repairConfirmationMsg1 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Different Repair Confirmation Message1"); 
        expect(repairConfirmationMsg1).toContainData(faultReported.diffRepairConfirmationMsg1);
        let repairConfirmationMsg2 = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Different Repair Confirmation Message2"); 
        expect(repairConfirmationMsg2).toContainData(faultReported.diffRepairConfirmationMsg2);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Different repair confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.contractorBlock, "Contractor list");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let diffRepairFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after repair switched to Obtain Quote"); 
        expect(diffRepairFaultStatus).toContainData(faultReported.faultStatusQuoteForm); 
        commonFunction.scrollToElement(this.contractorBlock);
        if(faultReported.contractorList){
           let contractors = faultReported.contractorList.split(",");
           contractors.forEach(function(contractor){
               commonFunction.scrollToElement(element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-checkbox")));
               commonFunction.clickOnElement(element(by.xpath("//ion-text[contains(text(), '" + contractor + "')]/../following-sibling::ion-col[4]//ion-checkbox")), contractor + " select button");
           });
        }
        commonFunction.scrollToElement(merge.nominalCodeList);
        commonFunction.clickOnElement(merge.nominalCodeList, "Nominal Code List");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-label',faultReported.nominalCode), faultReported.nominalCode);
        commonFunction.clickOnElement(merge.searchApplyBtn, "Nominal Code Search Apply button");
        commonFunction.scrollToElement(merge.requiredByDate);
        commonFunction.clickOnElement(merge.requiredByDate, "Required By Date picker");
        commonFunction.clickOnElement(merge.requiredByDateDoneBtn, "Required By Date Done button");
        commonFunction.waitForElementToBeVisible(merge.requiredByDate, "Required By Date");
        commonFunction.scrollToElement(this.proceedBtn);
        commonFunction.clickOnElement(this.proceedBtn, "Proceed button");
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Obtain Quote confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.contractorBlock, "Contractor list");
        if(faultReported.contractorList){
           let contractors = faultReported.contractorList.split(",");
           let contractorActionBtn = element(by.xpath("//ion-text[contains(text(), '" + contractors[0] + "')]/../following-sibling::ion-col[4]//ion-fab-button"));
           commonFunction.scrollToElement(contractorActionBtn);
           commonFunction.clickOnElement(contractorActionBtn, "Contractor Action button");
           let contractorViewBtn = element(by.xpath("//ion-text[contains(text(), '" + contractors[0] + "')]/../following-sibling::ion-col[4]//ion-fab-list/ion-button"));
           commonFunction.clickOnElement(contractorViewBtn, "Contractor View button");
           commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCQNACE));
           commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCQNACE), faultReported.positiveResponseCQNACE);
           commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Quote request accept confirmation OK button");
           commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
           commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCE));
           commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCE), faultReported.positiveResponseCDTCE);
           commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
           commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
           commonFunction.clickOnElement(element(by.xpath("//app-appointment-modal//ion-datetime")), "Date/Time Picker");
           commonFunction.setDate(faultReported.visitDateValue);
           commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor quote visit popup");
           commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
           commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', 'Upload Quote'));
           commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Upload Quote'), "Upload Quote button");
           commonFunction.sendKeysInto(element(by.xpath("//input[contains(@formcontrolname, 'quote')]")), faultReported.quoteAmount);
           commonFunction.uploadImage(element(by.xpath("//input[@id='docFiles']")), faultReported.quoteDoc, "Quote document");
           commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Submit'), "Quote Upload Submit button");
           commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status"); 
           commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', 'Yes, Quote accepted'));
           commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Yes, Quote accepted'), "Quote accept button");
           commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SKIP PAYMENT'), "SKIP PAYMENT button");
           commonFunction.sendKeysInto(merge.skipReason, faultReported.skipReason); 
           commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'SUBMIT'), "Skip Payment Reason submit button");                
        }
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status"); 
        commonFunction.scrollToElement(fSummary.faultStatus);
        let woRaisedFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after Works Order raised"); 
        expect(woRaisedFaultStatus).toContainData(faultReported.faultStatusCWONACE); 
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCWONACE), faultReported.positiveResponseCWONACE);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Accept Works Order confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCDTCEWO), faultReported.positiveResponseCDTCEWO);
        commonFunction.clickOnElement(this.dateTimeTypeList, "Date/Time Type list");
        commonFunction.clickOnElement(this.dateTimeType, "Date/Time Type option");
        commonFunction.clickOnElement(element(by.xpath("//app-appointment-modal//ion-datetime")), "Date/Time Picker");
        commonFunction.setDate(faultReported.visitDateValue);
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'YES'), "Yes button from schedule contractor repair visit popup");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', 'Mark the Job Completed'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Mark the Job Completed'), "Mark the Job Completed button");
        commonFunction.clickOnElement(this.dateTimeBtn, "Date time picker");
        commonFunction.setDate(faultReported.jobCompleteDateValue);
        commonFunction.sendKeysInto(element(by.xpath("//input[contains(@formcontrolname, 'invoiceAmount')]")), faultReported.quoteAmount);
        commonFunction.scrollToElement(element(by.xpath("//input[@id='docFiles']")));
        commonFunction.uploadImage(element(by.xpath("//input[@id='docFiles']")), faultReported.quoteDoc, "Invoice document");
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', 'Submit'),"Invoice Upload Submit button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cfteFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after job is completed"); 
        expect(cfteFaultStatus).toContainData(faultReported.faultStatusCFTE);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCFTE));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button', faultReported.positiveResponseCFTE), faultReported.positiveResponseCFTE);
        let tenantSatisfyConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Tenant satisfied Confirmation Message"); 
        expect(tenantSatisfyConfirmationMsg).toContainData(faultReported.tenantSatisfyConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Tenant satisfied confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let cfteResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after tenant is satisfied"); 
        expect(cfteResponseFaultStatus).toContainData(faultReported.faultStatusAfterCFTE);
        commonFunction.scrollToElement(commonFunction.getElementByCssContainingText('ion-button','Yes, Approve this Invoice'));
        commonFunction.clickOnElement(commonFunction.getElementByCssContainingText('ion-button','Yes, Approve this Invoice'),"Approve Invoice button");
        let approveInvoiceConfirmationMsg = commonFunction.updateVerificationObject(fSummary.confirmationMessage, "Approve Invoice Confirmation Message"); 
        expect(approveInvoiceConfirmationMsg).toContainData(faultReported.invoiceApproveConfirmationMsg);
        commonFunction.clickOnElement(fSummary.confirmationOKBtn, "Approve Invoice confirmation OK button");
        commonFunction.waitForElementToBeVisible(this.faultActionStatus, "Fault action status");
        commonFunction.scrollToElement(fSummary.faultStatus);
        let approveResponseFaultStatus = commonFunction.updateVerificationObject(fSummary.faultStatus, "Fault Status after invoice is approved"); 
        expect(approveResponseFaultStatus).toContainData(faultReported.faultStatusAfterInvoiceApproval);        
    }
}
module.exports = LandlordOwnRepair;
